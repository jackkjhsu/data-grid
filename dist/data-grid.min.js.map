{
  "version": 3,
  "sources": ["../src/utils/camelize.js", "../src/utils/normalizeData.js", "../src/utils/shortcuts.js", "../src/core/base-element.js", "../src/utils/addSelectOption.js", "../src/utils/appendParamsToUrl.js", "../src/utils/convertArray.js", "../src/utils/elementOffset.js", "../src/utils/interpolate.js", "../src/utils/getTextWidth.js", "../src/utils/randstr.js", "../src/utils/debounce.js", "../src/data-grid.js", "../src/core/base-plugin.js", "../src/plugins/column-resizer.js", "../src/utils/getParentElement.js", "../src/plugins/context-menu.js", "../src/plugins/draggable-headers.js", "../src/plugins/touch-support.js", "../src/plugins/selectable-rows.js", "../src/plugins/fixed-height.js", "../src/plugins/autosize-column.js", "../src/plugins/responsive-grid.js", "../src/plugins/row-actions.js", "../src/plugins/editable-column.js", "../src/plugins/spinner-support.js", "../src/plugins/save-state.js", "../data-grid.js"],
  "sourcesContent": ["/**\n * @param {String} str\n * @returns {String}\n */\nexport default function camelize(str) {\n    return str.toLowerCase().replace(/[^a-zA-Z0-9]+(.)/g, (m, chr) => chr.toUpperCase());\n}\n", "/**\n * Parse data attribute and return properly typed data\n * @param {String} v\n * @returns {any}\n */\nexport default function normalizeData(v) {\n    // Bool\n    if (v === \"true\") {\n        return true;\n    }\n    if (v === \"false\") {\n        return false;\n    }\n    // Null or empty\n    if (v === \"\" || v === \"null\") {\n        return null;\n    }\n    // Numeric attributes\n    if (v === Number(v).toString()) {\n        return Number(v);\n    }\n    // Only attempt json parsing for array or objects\n    if (v && [\"[\", \"{\"].includes(v.substring(0, 1))) {\n        try {\n            // In case we have only single quoted values, like ['one', 'two', 'three']\n            let val = v;\n            if (val.indexOf('\"') === -1) {\n                val = val.replace(/'/g, '\"');\n            }\n            return JSON.parse(decodeURIComponent(val));\n        } catch {\n            console.error(`Failed to parse ${v}`);\n            return {};\n        }\n    }\n    return v;\n}\n", "/**\n * @typedef FlexibleHTMLProps\n * @property {boolean} [checked] (HTMLInputElement)\n * @property {string} [value] (HTMLInputElement)\n * @property {number} [rowHeight] (HTMLTableRowElement)\n *\n * A flexible type HTMLElement type that does not require using instanceof all over the place\n * Make sure that your selector is indeed valid\n * Only includes most commons props\n * @typedef {HTMLElement & FlexibleHTMLProps} FlexibleHTMLElement\n */\n\n/**\n * Keep this as reference for easy documentation\n * @typedef {HTMLElement&HTMLInputElement&HTMLTableRowElement} MixedHTMLElement\n */\n\n/**\n * @typedef FlexibleEventProps\n * @property {FlexibleHTMLElement} target\n * @property {FlexibleHTMLElement} currentTarget\n * @property {DataTransfer} [dataTransfer] (DragEvent)\n * @property {number} [clientX] (MouseEvent)\n * @property {number} [clientY] (MouseEvent)\n *\n * @typedef {Event & FlexibleEventProps} FlexibleEvent\n */\n\n/**\n * Keep this as reference for easy documentation\n * @typedef {Event&MouseEvent&InputEvent&DragEvent&FocusEvent&KeyboardEvent&PointerEvent} MixedEvent\n */\n\n/**\n * @callback FlexibleListener\n * @param {FlexibleEvent} event\n */\n\nclass FlexibleEventListenerObject {\n    /**\n     * @param {FlexibleEvent} e\n     */\n    handleEvent(e) {}\n}\n\nconst supportedPassiveTypes = [\n    \"scroll\",\n    \"wheel\",\n    \"touchstart\",\n    \"touchmove\",\n    \"touchenter\",\n    \"touchend\",\n    \"touchleave\",\n    \"mouseout\",\n    \"mouseleave\",\n    \"mouseup\",\n    \"mousedown\",\n    \"mousemove\",\n    \"mouseenter\",\n    \"mousewheel\",\n    \"mouseover\",\n];\n\n/**\n * Automatically set passive options based on type\n * @param {string} type\n * @returns {AddEventListenerOptions}\n */\nfunction passiveOpts(type) {\n    if (supportedPassiveTypes.includes(type)) {\n        return { passive: true };\n    }\n    return {};\n}\n\n/**\n * @param {Element} el\n * @param {String} name\n * @returns {any}\n */\nexport function getAttribute(el, name) {\n    return el.getAttribute(name);\n}\n\n/**\n * @param {Element} el\n * @param {String} name\n * @returns {Boolean}\n */\nexport function hasAttribute(el, name) {\n    return el.hasAttribute(name);\n}\n\n/**\n * @param {Element} el\n * @param {String} name\n * @param {any} v\n * @param {Boolean} check Prevent setting if attribute is already there\n */\nexport function setAttribute(el, name, v = \"\", check = false) {\n    if (check && hasAttribute(el, name)) return;\n    el.setAttribute(name, `${v}`);\n}\n\n/**\n * @param {Element} el\n * @param {String} name\n */\nexport function removeAttribute(el, name) {\n    if (hasAttribute(el, name)) {\n        el.removeAttribute(name);\n    }\n}\n\n/**\n * @param {EventTarget} el\n * @param {String} type\n * @param {EventListenerObject|FlexibleListener} listener\n */\nexport function on(el, type, listener) {\n    el.addEventListener(type, listener, passiveOpts(type));\n}\n\n/**\n * @param {EventTarget} el\n * @param {String} type\n * @param {EventListenerObject|FlexibleListener} listener\n */\nexport function off(el, type, listener) {\n    el.removeEventListener(type, listener, passiveOpts(type));\n}\n\n/**\n * @param {EventTarget} el\n * @param {String} type\n * @param {EventListenerObject|FlexibleListener} listener\n */\nexport function one(el, type, listener) {\n    el.addEventListener(type, listener, {\n        once: true,\n    });\n}\n\n/**\n * @param {HTMLElement} el\n * @param {String} name\n * @param {any} data\n * @param {Boolean} bubbles\n */\nexport function dispatch(el, name, data = {}, bubbles = false) {\n    const opts = {};\n    if (bubbles) {\n        opts.bubbles = true;\n    }\n    if (data) {\n        opts.detail = data;\n    }\n    el.dispatchEvent(new CustomEvent(name, opts));\n}\n\n/**\n * @param {Element} el\n * @param {String} name\n * @returns {Boolean}\n */\nexport function hasClass(el, name) {\n    return el.classList.contains(name);\n}\n\n/**\n * @param {Element} el\n * @param {String} name\n */\nexport function addClass(el, name) {\n    el.classList.add(...name.split(\" \"));\n}\n\n/**\n * @param {Element} el\n * @param {String} name\n */\nexport function removeClass(el, name) {\n    el.classList.remove(...name.split(\" \"));\n}\n\n/**\n * @param {Element} el\n * @param {String} name\n */\nexport function toggleClass(el, name) {\n    el.classList.toggle(name);\n}\n\n/**\n * @param {String|HTMLElement} selector\n * @param {HTMLElement|Document} base\n * @returns {FlexibleHTMLElement|null}\n */\nexport function $(selector, base = document) {\n    if (selector instanceof HTMLElement) {\n        return selector;\n    }\n    return base.querySelector(selector);\n}\n\n/**\n * @param {String} selector\n * @param {Element|Document} base\n * @returns {Array<FlexibleHTMLElement>}\n */\nexport function $$(selector, base = document) {\n    return Array.from(base.querySelectorAll(selector));\n}\n\n/**\n * Easily retrieve untyped element\n * For actual type, prefer use of el.querySelector\n * @param {HTMLElement} el\n * @param {String|HTMLElement} selector\n * @returns {FlexibleHTMLElement}\n */\nexport function find(el, selector) {\n    return $(selector, el);\n}\n\n/**\n * Easily retrieve untyped elements\n * For actual type, prefer use of el.querySelectorAll\n * @param {Element} el\n * @param {String} selector\n * @returns {Array<FlexibleHTMLElement>}\n */\nexport function findAll(el, selector) {\n    return $$(selector, el);\n}\n\n/**\n * @param {*} el\n * @returns {FlexibleHTMLElement}\n */\nexport function el(el) {\n    return el;\n}\n\n/**\n * @template {keyof HTMLElementTagNameMap} K\n * @param {K} tagName\n * @param {HTMLElement} parent\n * @returns {HTMLElementTagNameMap[K]}\n */\nexport function ce(tagName, parent = null) {\n    const el = document.createElement(tagName);\n    if (parent) {\n        parent.appendChild(el);\n    }\n    return el;\n}\n\n/**\n * @param {HTMLElement} newNode\n * @param {HTMLElement} existingNode\n */\nexport function insertAfter(newNode, existingNode) {\n    existingNode.parentNode.insertBefore(newNode, existingNode.nextSibling);\n}\n", "import camelize from \"../utils/camelize.js\";\nimport normalizeData from \"../utils/normalizeData.js\";\nimport { dispatch, getAttribute, setAttribute } from \"../utils/shortcuts.js\";\n\n/** @typedef {import('../data-grid').Options} Options */\n\n/**\n * Base element that does not contain any specific logic\n * related to this project but makes HTMLElemnt usable\n */\nclass BaseElement extends HTMLElement {\n    /**\n     * @param {Object} options\n     */\n    constructor(options = {}) {\n        super();\n\n        /** @type {Options} */\n        this.options = Object.assign({}, this.defaultOptions, this.normalizedDataset, options);\n\n        this.log(\"constructor\");\n\n        this.fireEvents = true;\n        this._ready();\n\n        this.log(\"ready\");\n    }\n\n    get defaultOptions() {\n        return {};\n    }\n\n    /**\n     * @param {String} opt\n     * @returns {any}\n     */\n    getOption(opt) {\n        return this.options[opt];\n    }\n\n    /**\n     * @param {String} opt\n     * @param {any} v\n     */\n    setOption(opt, v) {\n        setAttribute(this, `data-${opt}`, v);\n    }\n\n    /**\n     * @param {String} opt\n     */\n    toggleOption(opt) {\n        setAttribute(this, `data-${opt}`, !this.getOption(opt));\n    }\n\n    get normalizedDataset() {\n        const jsonConfig = this.dataset.config ? JSON.parse(this.dataset.config) : {};\n        const data = { ...this.dataset };\n        for (const key in data) {\n            if (key === \"config\") {\n                continue;\n            }\n            data[key] = normalizeData(data[key]);\n        }\n        // Once normalized, merge into json config\n        Object.assign(data, jsonConfig);\n        return data;\n    }\n\n    /**\n     * @returns {String}\n     */\n    static template() {\n        return \"\";\n    }\n\n    /**\n     * This is called at the end of constructor. Extend in subclass if needed.\n     */\n    _ready() {}\n\n    /**\n     * @param {String|Error} message\n     */\n    log(message) {\n        if (this.options.debug) {\n            console.log(`[${getAttribute(this, \"id\")}] ${message}`);\n        }\n    }\n\n    /**\n     * Handle events within the component\n     * @link https://gist.github.com/WebReflection/ec9f6687842aa385477c4afca625bbf4#handling-events\n     * @param {Event} event\n     */\n    handleEvent(event) {\n        if (this[`on${event.type}`]) {\n            this[`on${event.type}`](event);\n        }\n    }\n\n    /**\n     * This is called when connected. Extend in subclass if needed.\n     */\n    _connected() {}\n\n    connectedCallback() {\n        // ensure whenDefined callbacks run first\n        setTimeout(() => {\n            this.log(\"connectedCallback\");\n\n            // Append only when labels had the opportunity to be set\n            // Don't use shadow dom as it makes theming super hard\n            const template = document.createElement(\"template\");\n            // @ts-ignore\n            template.innerHTML = this.constructor.template();\n            this.appendChild(template.content.cloneNode(true));\n\n            this._connected();\n            // @link https://gist.github.com/WebReflection/ec9f6687842aa385477c4afca625bbf4#life-cycle-events\n            dispatch(this, \"connected\");\n        }, 0);\n    }\n\n    /**\n     * This is called when disconnected. Extend in subclass if needed.\n     */\n    _disconnected() {}\n\n    disconnectedCallback() {\n        this.log(\"disconnectedCallback\");\n        this._disconnected();\n        // @link https://gist.github.com/WebReflection/ec9f6687842aa385477c4afca625bbf4#life-cycle-events\n        dispatch(this, \"disconnected\");\n    }\n\n    /**\n     * @link https://gist.github.com/WebReflection/ec9f6687842aa385477c4afca625bbf4#a-props-like-accessor\n     * @returns {Object}\n     */\n    get transformAttributes() {\n        return {};\n    }\n\n    /**\n     * This is only meant to work with data attributes\n     * This allows us to have properties that reflect automatically in the component\n     * @link https://gist.github.com/WebReflection/ec9f6687842aa385477c4afca625bbf4#reflected-dataset-attributes\n     * @param {String} attributeName\n     * @param {String} oldValue\n     * @param {String} newValue\n     */\n    attributeChangedCallback(attributeName, oldValue, newValue) {\n        // It didn't change\n        if (oldValue === newValue) {\n            return;\n        }\n\n        this.log(`attributeChangedCallback: ${attributeName}`);\n\n        let isOption = false;\n        const transformer = this.transformAttributes[attributeName] ?? normalizeData;\n\n        let attr = attributeName;\n        // Data attributes are mapped to options while other attributes are mapped as properties\n        if (attr.indexOf(\"data-\") === 0) {\n            attr = attr.slice(5);\n            isOption = true;\n        }\n        attr = camelize(attr);\n        if (isOption) {\n            this.options[attr] = transformer(newValue);\n        } else {\n            this[attr] = transformer(newValue);\n        }\n\n        // Fire internal event\n        if (this.fireEvents && this[`${attr}Changed`]) {\n            this[`${attr}Changed`]();\n        }\n    }\n}\n\nexport default BaseElement;\n", "/**\n * @param {HTMLSelectElement} el\n * @param {String} value\n * @param {String} label\n * @param {Boolean} checked\n */\nexport default function addSelectOption(el, value, label, checked = false) {\n    const opt = document.createElement(\"option\");\n    opt.value = `${value}`;\n    if (checked) {\n        opt.selected = true;\n    }\n    opt.label = label;\n    el.appendChild(opt);\n}\n", "/**\n * @param {URL} url\n * @param {Object} params\n */\nexport default function appendParamsToUrl(url, params = {}) {\n    for (const key of Object.keys(params)) {\n        if (Array.isArray(params[key])) {\n            for (const k of Object.keys(params[key])) {\n                // @ts-ignore\n                url.searchParams.append(isNaN(k) ? `${key}[${k}]` : key, params[key][k]);\n            }\n        } else {\n            url.searchParams.append(key, params[key]);\n        }\n    }\n}\n", "/**\n * Force value as arrays\n * @param {String|Array} v\n * @returns {Array}\n */\nexport default function convertArray(v) {\n    if (typeof v === \"string\") {\n        if (v[0] === \"[\") {\n            // \"['my', 'value']\" would fail as a json\n            let bv = v;\n            if (bv.indexOf('\"') === -1) {\n                bv = bv.replace(/'/g, '\"');\n            }\n            return JSON.parse(bv);\n        }\n\n        return v.split(\",\");\n    }\n    if (!Array.isArray(v)) {\n        console.error(\"Invalid array\", v);\n        return [];\n    }\n    return v;\n}\n", "/**\n * @param {HTMLElement} el\n * @returns {Object}\n */\nexport default function elementOffset(el) {\n    const rect = el.getBoundingClientRect();\n    const scrollLeft = window.pageXOffset || document.documentElement.scrollLeft;\n    const scrollTop = window.pageYOffset || document.documentElement.scrollTop;\n    return { top: rect.top + scrollTop, left: rect.left + scrollLeft };\n}\n", "/**\n * Replace element within {} by their data value\n * @param {String} str\n * @param {Object} data\n * @returns {String}\n */\nexport default function interpolate(str, data) {\n    return str.replace(/\\{([^}]+)?\\}/g, ($1, $2) => data[$2]);\n}\n", "let canvas;\n\n/**\n * Uses canvas.measureText to compute and return the width of the given text of given font in pixels.\n * Getting computed styles only works for dom that are added in the dom\n * @see https://stackoverflow.com/questions/118241/calculate-text-width-with-javascript/21015393#21015393\n * @param {String} text The text to be rendered.\n * @param {Element} el Target element (defaults to body)\n * @param {Boolean} withPadding Include padding on element\n * @returns {Number}\n */\nexport default function getTextWidth(text, el = document.body, withPadding = false) {\n    const styles = window.getComputedStyle(el || document.createElement(\"div\"));\n    const fontWeight = styles.getPropertyValue(\"font-weight\") || \"normal\";\n    const fontSize = styles.getPropertyValue(\"font-size\") || \"1rem\";\n    const fontFamily = styles.getPropertyValue(\"font-family\") || \"Arial\";\n\n    let padding = 0;\n    if (withPadding) {\n        const paddingLeft = styles.getPropertyValue(\"padding-left\") || \"0\";\n        const paddingRight = styles.getPropertyValue(\"padding-right\") || \"0\";\n        padding = Number.parseInt(paddingLeft) + Number.parseInt(paddingRight);\n    }\n\n    // re-use canvas object for better performance\n    if (!canvas) {\n        canvas = document.createElement(\"canvas\");\n    }\n    const context = canvas.getContext(\"2d\");\n    context.font = `${fontWeight} ${fontSize} ${fontFamily}`;\n    const metrics = context.measureText(text);\n    return Number.parseInt(metrics.width) + padding;\n}\n", "/**\n * @param {String} prefix\n * @returns {String}\n */\nexport default function randstr(prefix) {\n    return Math.random()\n        .toString(36)\n        .replace(\"0.\", prefix || \"\");\n}\n", "/**\n * Define a function that can be happily passed to addEventListener\n * @typedef {Function & EventListenerOrEventListenerObject} ExtendedFunction\n */\n\n/**\n * @param {Function} handler\n * @param {Number} timeout\n * @returns {ExtendedFunction}\n */\nexport default function debounce(handler, timeout = 300) {\n    let timer = null;\n    return (...args) => {\n        clearTimeout(timer);\n        timer = setTimeout(() => {\n            timer = null;\n            handler(...args);\n        }, timeout);\n    };\n}\n", "/**\n * Data Grid Web component\n *\n * Credits for inspiration\n * @link https://github.com/riverside/zino-grid\n */\n\nimport BaseElement from \"./core/base-element.js\";\nimport addSelectOption from \"./utils/addSelectOption.js\";\nimport appendParamsToUrl from \"./utils/appendParamsToUrl.js\";\nimport camelize from \"./utils/camelize.js\";\nimport convertArray from \"./utils/convertArray.js\";\nimport elementOffset from \"./utils/elementOffset.js\";\nimport interpolate from \"./utils/interpolate.js\";\nimport getTextWidth from \"./utils/getTextWidth.js\";\nimport randstr from \"./utils/randstr.js\";\nimport debounce from \"./utils/debounce.js\";\nimport {\n    $,\n    $$,\n    dispatch,\n    find,\n    findAll,\n    hasClass,\n    removeAttribute,\n    getAttribute,\n    setAttribute,\n    addClass,\n    toggleClass,\n    on,\n    ce,\n} from \"./utils/shortcuts.js\";\n\n/**\n * Column definition\n * @typedef Column\n * @property {String} field - the key in the data\n * @property {String} title - the title to display in the header (defaults to \"field\" if not set)\n * @property {Number} [width] - the width of the column (auto otherwise)\n * @property {String} [class] - class to set on the column (target body or header with th.class or td.class)\n * @property {String} [attr] - don't render the column and set a matching attribute on the row with the value of the field\n * @property {Boolean} [hidden] - hide the column\n * @property {Boolean} [noSort] - allow disabling sort for a given column\n * @property {String | Function} [format] - custom data formatting\n * @property {String} [defaultFormatValue] - default value to use for formatting\n * @property {String} [transform] - custom value transformation\n * @property {Boolean} [editable] - replace with input (EditableColumn module)\n * @property {String} [editableType] - type of input (EditableColumn module)\n * @property {Number} [responsive] - the higher the value, the sooner it will be hidden, disable with 0 (ResponsiveGrid module)\n * @property {Boolean} [responsiveHidden] - hidden through responsive module (ResponsiveGrid module)\n * @property {String} [filterType] - defines a filter field type (\"text\" or \"select\" - defaults to \"text\")\n * @property {Array} [filterList] - defines a custom array to populate a filter select field in the format of [{value: \"\", text: \"\"},...]. When defined, it overrides the default behaviour where the filter select elements are populated by the unique values from the corresponding column records.\n * @property {Object} [firstFilterOption] - defines an object for the first option element of the filter select field. defaults to {value: \"\", text: \"\"}\n */\n\n/**\n * Row action\n * @typedef Action\n * @property {String} title - the title of the button\n * @property {String} name - the name of the action\n * @property {String} class - the class for the button\n * @property {String} url - link for the action\n * @property {String} html - custom button data\n * @property {Boolean} [confirm] - needs confirmation\n * @property {Boolean} default - is the default row action\n */\n\n// Import definitions without importing the actual file\n/** @typedef {import('./plugins/autosize-column').default} AutosizeColumn */\n/** @typedef {import('./plugins/column-resizer').default} ColumnResizer */\n/** @typedef {import('./plugins/context-menu').default} ContextMenu */\n/** @typedef {import('./plugins/draggable-headers').default} DraggableHeaders */\n/** @typedef {import('./plugins/editable-column').default} EditableColumn */\n/** @typedef {import('./plugins/fixed-height').default} FixedHeight */\n/** @typedef {import('./plugins/responsive-grid').default} ResponsiveGrid */\n/** @typedef {import('./plugins/row-actions').default} RowActions */\n/** @typedef {import('./plugins/selectable-rows').default} SelectableRows */\n/** @typedef {import('./plugins/touch-support').default} TouchSupport */\n/** @typedef {import('./plugins/spinner-support').default} SpinnerSupport */\n/** @typedef {import('./plugins/save-state').default} SaveState */\n\n/**\n * These plugins are all optional\n * @typedef {Object} Plugins\n * @property {ColumnResizer} [ColumnResizer] resize handlers in the headers\n * @property {ContextMenu} [ContextMenu] menu to show/hide columns\n * @property {DraggableHeaders} [DraggableHeaders] draggable headers columns\n * @property {EditableColumn} [EditableColumn] draggable headers columns\n * @property {TouchSupport} [TouchSupport] touch swipe\n * @property {SelectableRows} [SelectableRows] create a column with checkboxes to select rows\n * @property {FixedHeight} [FixedHeight] allows having fixed height tables\n * @property {AutosizeColumn} [AutosizeColumn] compute ideal width based on column content\n * @property {ResponsiveGrid} [ResponsiveGrid] hide/show column on the fly\n * @property {RowActions} [RowActions] add action on rows\n * @property {SpinnerSupport} [SpinnerSupport] inserts a spinning icon element to indicate grid loading.\n * @property {SaveState} [SaveState] stores grid filter, sort, and paging.\n */\n\n/**\n * Parameters to pass along or receive from the server\n * @typedef ServerParams\n * @property {String} serverParams.start\n * @property {String} serverParams.length\n * @property {String} serverParams.search\n * @property {String} serverParams.sort\n * @property {String} serverParams.sortDir\n * @property {String} serverParams.dataKey\n * @property {String} serverParams.metaKey\n * @property {String} serverParams.metaTotalKey\n * @property {String} serverParams.metaFilteredKey\n * @property {String} serverParams.optionsKey\n * @property {String} serverParams.paramsKey\n */\n\n/**\n * Available data grid options, plugins included\n * @typedef Options\n * @property {?String} id Custom id for the grid\n * @property {?String} url An URL with data to display in JSON format\n * @property {Boolean} debug Log actions in DevTools console\n * @property {Boolean} filter Allows a filtering functionality\n * @property {Boolean} sort Allows a sort by column functionality\n * @property {String} defaultSort Default sort field if sorting is enabled\n * @property {Boolean} server Is a server side powered grid\n * @property {ServerParams} serverParams Describe keys passed to the server backend\n * @property {String} dir Dir\n * @property {Array} perPageValues Available per page options\n * @property {Boolean} hidePerPage Hides the page size select element\n * @property {Column[]} columns Available columns\n * @property {Number} defaultPage Starting page\n * @property {Number} perPage Number of records displayed per page (page size)\n * @property {Boolean} expand  Allow cell content to spawn over multiple lines\n * @property {Action[]} actions Row actions (RowActions module)\n * @property {Boolean} collapseActions Group actions (RowActions module)\n * @property {Boolean} resizable Make columns resizable (ColumnResizer module)\n * @property {Boolean} selectable Allow selecting rows with a checkbox (SelectableRows module)\n * @property {Boolean} selectVisibleOnly Select all only selects visible rows (SelectableRows module)\n * @property {Boolean} autosize Compute column sizes based on given data (Autosize module)\n * @property {Boolean} autoheight Adjust height so that it matches table size (FixedHeight module)\n * @property {Boolean} autohidePager auto-hides the pager when number of records falls below the selected page size\n * @property {Boolean} menu Right click menu on column headers (ContextMenu module)\n * @property {Boolean} reorder Allows a column reordering functionality (DraggableHeaders module)\n * @property {Boolean} responsive Change display mode on small screens (ResponsiveGrid module)\n * @property {Boolean} responsiveToggle Show toggle column (ResponsiveGrid module)\n * @property {Boolean} filterOnEnter Toggles the ability to filter column data by pressing the Enter or Return key\n * @property {String} spinnerClass Sets a space-delimited string of css classes for a spinner (use spinner-border css class for bootstrap 5 spinner)\n * @property {Number} filterKeypressDelay Sets a keypress delay time in milliseconds before triggering filter operation.\n * @property {Boolean} saveState Enable/disable save state plugin (SaveState module)\n * @property {?String} errorMessage A generic text to be displayed in footer when error occurs.\n */\n\n/**\n * Available labels that can be translated\n * @typedef Labels\n * @property {String} itemsPerPage\n * @property {String} gotoPage\n * @property {String} gotoFirstPage\n * @property {String} gotoPrevPage\n * @property {String} gotoNextPage\n * @property {String} gotoLastPage\n * @property {String} of\n * @property {String} items\n * @property {String} resizeColumn\n * @property {String} noData\n * @property {String} areYouSure\n * @property {String} networkError\n */\n\n/**\n * List of registered plugins\n * @type {Plugins}\n */\nlet plugins = {};\n\n/**\n * @type {Labels}\n */\nlet labels = {\n    itemsPerPage: \"Items per page\",\n    gotoPage: \"Go to page\",\n    gotoFirstPage: \"Go to first page\",\n    gotoPrevPage: \"Go to previous page\",\n    gotoNextPage: \"Go to next page\",\n    gotoLastPage: \"Go to last page\",\n    of: \"of\",\n    items: \"items\",\n    resizeColumn: \"Resize column\",\n    noData: \"No data\",\n    areYouSure: \"Are you sure?\",\n    networkError: \"Network response error\",\n};\n\n/**\n * Column definition will update some props on the html element\n * @param {HTMLElement} el\n * @param {Column} column\n */\nfunction applyColumnDefinition(el, column) {\n    if (column.width) {\n        setAttribute(el, \"width\", column.width);\n    }\n    if (column.class) {\n        addClass(el, column.class);\n    }\n    if (column.hidden) {\n        setAttribute(el, \"hidden\", \"\");\n        if (column.responsiveHidden) {\n            addClass(el, \"dg-responsive-hidden\");\n        }\n    }\n}\n\n/**\n */\nclass DataGrid extends BaseElement {\n    _filterSelector = \"[id^=dg-filter]\";\n    _excludedKeys = [\n        37,\n        39,\n        38,\n        40,\n        45,\n        36,\n        35,\n        33,\n        34,\n        27,\n        20,\n        16,\n        17,\n        91,\n        92,\n        18,\n        93,\n        144,\n        231,\n        \"ArrowLeft\",\n        \"ArrowRight\",\n        \"ArrowUp\",\n        \"ArrowDown\",\n        \"Insert\",\n        \"Home\",\n        \"End\",\n        \"PageUp\",\n        \"PageDown\",\n        \"Escape\",\n        \"CapsLock\",\n        \"Shift\",\n        \"Control\",\n        \"Meta\",\n        \"Alt\",\n        \"ContextMenu\",\n        \"NumLock\",\n        \"Unidentified\",\n    ];\n\n    _ready() {\n        setAttribute(this, \"id\", this.options.id ?? randstr(\"el-\"), true);\n\n        /**\n         * The grid displays that data\n         * @type {Array}\n         */\n        this.data = [];\n        /**\n         * We store the original data in this\n         * @type {Array}\n         */\n        this.originalData; // declared uninitialized to allow data preloading before fetch.\n\n        // Make the IDE happy\n        /**\n         * @type {Options}\n         */\n        this.options = this.options || this.defaultOptions;\n\n        // Init values\n        this.fireEvents = false;\n        this.page = this.options.defaultPage || 1;\n        this.pages = 0;\n        this.meta; // declared uninitialized to allow data preloading before fetch.\n        /**\n         * @type {Plugins}\n         */\n        this.plugins = {};\n        // Init plugins\n        for (const [pluginName, pluginClass] of Object.entries(plugins)) {\n            // @ts-ignore until we can set typeof import ...\n            this.plugins[pluginName] = new pluginClass(this);\n        }\n\n        // Expose options as observed attributes in the dom\n        // Do it when fireEvents is disabled to avoid firing change callbacks\n        for (const attr of DataGrid.observedAttributes) {\n            if (attr.indexOf(\"data-\") === 0) {\n                setAttribute(this, attr, this.options[camelize(attr.slice(5))]);\n            }\n        }\n    }\n\n    static template() {\n        return `\n<table role=\"grid\" >\n    <thead role=\"rowgroup\">\n        <tr role=\"row\" aria-rowindex=\"1\" class=\"dg-head-columns\"><th><!-- keep for getTextWidth --></th></tr>\n        <tr role=\"row\" aria-rowindex=\"2\" class=\"dg-head-filters\"></tr>\n    </thead>\n    <tbody role=\"rowgroup\" data-empty=\"${labels.noData}\"></tbody>\n    <tfoot role=\"rowgroup\" hidden>\n        <tr role=\"row\" aria-rowindex=\"1\">\n            <td role=\"gridcell\">\n            <div class=\"dg-footer\">\n                <div class=\"dg-page-nav\">\n                  <select class=\"dg-select-per-page\" aria-label=\"${labels.itemsPerPage}\"></select>\n                </div>\n                <div class=\"dg-pagination\">\n                  <button type=\"button\" class=\"dg-btn-first dg-rotate\" title=\"${labels.gotoFirstPage}\" aria-label=\"${labels.gotoFirstPage}\" disabled>\n                    <i class=\"dg-skip-icon\"></i>\n                  </button>\n                  <button type=\"button\" class=\"dg-btn-prev dg-rotate\" title=\"${labels.gotoPrevPage}\" aria-label=\"${labels.gotoPrevPage}\" disabled>\n                    <i class=\"dg-nav-icon\"></i>\n                  </button>\n                  <input type=\"number\" class=\"dg-input-page\" min=\"1\" step=\"1\" value=\"1\" aria-label=\"${labels.gotoPage}\">\n                  <button type=\"button\" class=\"dg-btn-next\" title=\"${labels.gotoNextPage}\" aria-label=\"${labels.gotoNextPage}\" disabled>\n                    <i class=\"dg-nav-icon\"></i>\n                  </button>\n                  <button type=\"button\" class=\"dg-btn-last\" title=\"${labels.gotoLastPage}\" aria-label=\"${labels.gotoLastPage}\" disabled>\n                    <i class=\"dg-skip-icon\"></i>\n                  </button>\n                </div>\n                <div class=\"dg-meta\">\n                  <span class=\"dg-low\">0</span> - <span class=\"dg-high\">0</span> ${labels.of} <span class=\"dg-total\">0</span> ${labels.items}\n                </div>\n            </div>\n            </td>\n        </tr>\n    </tfoot>\n    <ul class=\"dg-menu\" hidden></ul>\n</table>\n`;\n    }\n\n    /**\n     * @returns {Labels}\n     */\n    get labels() {\n        return labels;\n    }\n\n    /**\n     * @returns {Labels}\n     */\n    static getLabels() {\n        return labels;\n    }\n\n    /**\n     * @param {Object} v\n     */\n    static setLabels(v) {\n        labels = Object.assign(labels, v);\n    }\n\n    /**\n     * @returns {Column}\n     */\n    get defaultColumn() {\n        return {\n            field: \"\",\n            title: \"\",\n            width: 0,\n            class: \"\",\n            attr: \"\",\n            hidden: false,\n            editable: false,\n            noSort: false,\n            responsive: 1,\n            responsiveHidden: false,\n            format: \"\",\n            transform: \"\",\n            filterType: \"text\",\n            firstFilterOption: { value: \"\", text: \"\" },\n        };\n    }\n\n    /**\n     * @returns {Options}\n     */\n    get defaultOptions() {\n        return {\n            id: null,\n            url: null,\n            perPage: 10,\n            debug: false,\n            filter: false,\n            menu: false,\n            sort: false,\n            server: false,\n            serverParams: {\n                start: \"start\",\n                length: \"length\",\n                search: \"search\",\n                sort: \"sort\",\n                sortDir: \"sortDir\",\n                dataKey: \"data\",\n                metaKey: \"meta\",\n                metaTotalKey: \"total\",\n                metaFilteredKey: \"filtered\",\n                optionsKey: \"options\",\n                paramsKey: \"params\",\n            },\n            defaultSort: \"\",\n            reorder: false,\n            dir: \"ltr\",\n            perPageValues: [10, 25, 50, 100, 250],\n            hidePerPage: false,\n            columns: [],\n            actions: [],\n            collapseActions: false,\n            selectable: false,\n            selectVisibleOnly: true,\n            defaultPage: 1,\n            resizable: false,\n            autosize: true,\n            expand: false,\n            autoheight: true,\n            autohidePager: false,\n            responsive: false,\n            responsiveToggle: true,\n            filterOnEnter: true,\n            filterKeypressDelay: 500,\n            spinnerClass: \"\",\n            saveState: false,\n            errorMessage: \"\",\n        };\n    }\n\n    /**\n     * Determines if the grid is initialized.\n     * @returns {Boolean}\n     */\n    get isInit() {\n        return this.classList.contains(\"dg-initialized\");\n    }\n\n    /**\n     * Determines if data load has failed.\n     * @returns {Boolean}\n     */\n    get hasDataError() {\n        return this.classList.contains(\"dg-network-error\");\n    }\n\n    /**\n     * @param {Plugins} list\n     */\n    static registerPlugins(list) {\n        plugins = list;\n    }\n\n    /**\n     * @param {String} plugin\n     */\n    static unregisterPlugins(plugin = null) {\n        if (plugin === null) {\n            plugins = {};\n        } else {\n            delete plugins[plugin];\n        }\n    }\n\n    /**\n     * @returns {Plugins}\n     */\n    static registeredPlugins() {\n        return plugins;\n    }\n\n    /**\n     * @param {Object|Array} columns\n     * @returns {Column[]}\n     */\n    convertColumns(columns) {\n        const cols = [];\n        // Convert key:value objects to actual columns\n        if (typeof columns === \"object\" && !Array.isArray(columns)) {\n            for (const key of Object.keys(columns)) {\n                const col = Object.assign({}, this.defaultColumn);\n                col.title = columns[key];\n                col.field = key;\n                cols.push(col);\n            }\n        } else {\n            for (const item of columns) {\n                let col = Object.assign({}, this.defaultColumn);\n                if (typeof item === \"string\") {\n                    col.title = item;\n                    col.field = item;\n                } else if (typeof item === \"object\") {\n                    col = Object.assign(col, item);\n                    if (!col.field) {\n                        console.error(\"Invalid column definition\", item);\n                    }\n                    if (!col.title) {\n                        col.title = col.field;\n                    }\n                } else {\n                    console.error(\"Column definition must be a string or an object\");\n                }\n                cols.push(col);\n            }\n        }\n        return cols;\n    }\n\n    /**\n     * @link https://gist.github.com/WebReflection/ec9f6687842aa385477c4afca625bbf4#reflected-dom-attributes\n     * @returns {Array}\n     */\n    static get observedAttributes() {\n        return [\n            \"page\",\n            \"data-filter\",\n            \"data-sort\",\n            \"data-debug\",\n            \"data-reorder\",\n            \"data-menu\",\n            \"data-selectable\",\n            \"data-url\",\n            \"data-per-page\",\n            \"data-responsive\",\n        ];\n    }\n\n    get transformAttributes() {\n        return {\n            columns: (v) => this.convertColumns(convertArray(v)),\n            actions: (v) => convertArray(v),\n            defaultPage: (v) => Number.parseInt(v),\n            perPage: (v) => Number.parseInt(v),\n        };\n    }\n\n    /** @returns {HTMLTableSectionElement} */ //@ts-ignore\n    get thead() {\n        return $(\"thead\", this);\n    }\n\n    /** @returns {HTMLTableSectionElement} */ //@ts-ignore\n    get tbody() {\n        return $(\"tbody\", this);\n    }\n\n    /** @returns {HTMLTableSectionElement} */ //@ts-ignore\n    get tfoot() {\n        return $(\"tfoot\", this);\n    }\n\n    get page() {\n        return Number.parseInt(this.getAttribute(\"page\"));\n    }\n\n    set page(val) {\n        setAttribute(this, \"page\", this.constrainPageValue(val));\n    }\n\n    /**\n     * Loads data and configures the grid.\n     * @param {Boolean} initOnly\n     */\n    urlChanged(initOnly = false) {\n        if (initOnly && !this.isInit) return;\n        this.reconfig();\n        this.loadData().then(() => {\n            this.configureUi();\n        });\n    }\n\n    /**\n     * Clears columns, re-renders table, and repopulates columns to ensure consistent column widths rendering.\n     */\n    reconfig() {\n        const cols = this.options.columns;\n        this.options.columns = [];\n        this.configureUi();\n        this.options.columns = cols;\n    }\n\n    constrainPageValue(v) {\n        let pv = v;\n        if (this.pages < pv) {\n            pv = this.pages;\n        }\n        if (pv < 1 || !pv) {\n            pv = 1;\n        }\n        return pv;\n    }\n\n    fixPage() {\n        this.pages = this.totalPages();\n        this.page = this.constrainPageValue(this.page);\n\n        // Show current page in input\n        setAttribute(this.inputPage, \"max\", this.pages);\n        this.inputPage.value = `${this.page}`;\n        this.inputPage.disabled = this.pages < 2;\n    }\n\n    pageChanged() {\n        this.reload();\n    }\n\n    responsiveChanged() {\n        if (!this.plugins.ResponsiveGrid) {\n            return;\n        }\n        if (this.options.responsive) {\n            this.plugins.ResponsiveGrid.observe();\n        } else {\n            this.plugins.ResponsiveGrid.unobserve();\n        }\n    }\n\n    menuChanged() {\n        this.renderHeader();\n    }\n\n    /**\n     * This is the callback for the select control\n     */\n    changePerPage() {\n        this.options.perPage = Number.parseInt(this.selectPerPage.options[this.selectPerPage.selectedIndex].value);\n        this.perPageChanged();\n    }\n\n    /**\n     * This is the actual event triggered on attribute change\n     */\n    perPageChanged() {\n        // Refresh UI\n        if (\n            this.options.perPage !== Number.parseInt(this.selectPerPage.options[this.selectPerPage.selectedIndex].value)\n        ) {\n            this.perPageValuesChanged();\n        }\n        // Make sure current page is still valid\n        let updatePage = this.page;\n        while (updatePage > 1 && this.page * this.options.perPage > this.totalRecords()) {\n            updatePage--;\n        }\n        if (updatePage !== this.page) {\n            // Triggers pageChanged, which will trigger reload\n            this.page = updatePage;\n        } else {\n            // Simply reload current page\n            this.reload(() => {\n                // Preserve distance between top of page and select control if no fixed height\n                if (!this.plugins.FixedHeight || !this.plugins.FixedHeight.hasFixedHeight) {\n                    this.selectPerPage.scrollIntoView();\n                }\n            });\n        }\n    }\n\n    dirChanged() {\n        setAttribute(this, \"dir\", this.options.dir);\n    }\n\n    defaultSortChanged() {\n        this.sortChanged();\n    }\n\n    /**\n     * Populate the select dropdown according to options\n     */\n    perPageValuesChanged() {\n        if (!this.selectPerPage) {\n            return;\n        }\n        while (this.selectPerPage.lastChild) {\n            this.selectPerPage.removeChild(this.selectPerPage.lastChild);\n        }\n        for (const v of this.options.perPageValues) {\n            addSelectOption(this.selectPerPage, v, v, v === this.options.perPage);\n        }\n    }\n\n    _connected() {\n        /**\n         * @type {HTMLTableElement}\n         */\n        this.table = this.querySelector(\"table\");\n        /**\n         * @type {HTMLInputElement}\n         */\n        this.btnFirst = this.querySelector(\".dg-btn-first\");\n        /**\n         * @type {HTMLInputElement}\n         */\n        this.btnPrev = this.querySelector(\".dg-btn-prev\");\n        /**\n         * @type {HTMLInputElement}\n         */\n        this.btnNext = this.querySelector(\".dg-btn-next\");\n        /**\n         * @type {HTMLInputElement}\n         */\n        this.btnLast = this.querySelector(\".dg-btn-last\");\n        /**\n         * @type {HTMLSelectElement}\n         */\n        this.selectPerPage = this.querySelector(\".dg-select-per-page\");\n        /**\n         * @type {HTMLInputElement}\n         */\n        this.inputPage = this.querySelector(\".dg-input-page\");\n\n        this.getFirst = this.getFirst.bind(this);\n        this.getPrev = this.getPrev.bind(this);\n        this.getNext = this.getNext.bind(this);\n        this.getLast = this.getLast.bind(this);\n        this.changePerPage = this.changePerPage.bind(this);\n        this.gotoPage = this.gotoPage.bind(this);\n\n        this.btnFirst.addEventListener(\"click\", this.getFirst);\n        this.btnPrev.addEventListener(\"click\", this.getPrev);\n        this.btnNext.addEventListener(\"click\", this.getNext);\n        this.btnLast.addEventListener(\"click\", this.getLast);\n        this.selectPerPage.addEventListener(\"change\", this.changePerPage);\n        this.selectPerPage.toggleAttribute(\"hidden\", this.options.hidePerPage);\n        this.inputPage.addEventListener(\"input\", this.gotoPage);\n\n        for (const plugin of Object.values(this.plugins)) {\n            plugin.connected();\n        }\n\n        // Display even if we don't have data\n        this.dirChanged();\n        this.perPageValuesChanged();\n\n        // @ts-ignore\n        this.loadData().finally(() => {\n            this.configureUi();\n\n            this.sortChanged();\n            this.classList.add(\"dg-initialized\"); //acts as a flag to prevent unnecessary server calls down the chain.\n\n            this.filterChanged();\n            this.reorderChanged();\n\n            this.dirChanged();\n            this.perPageValuesChanged();\n            this.pageChanged();\n\n            this.fireEvents = true; // We can now fire attributeChangedCallback events\n\n            this.log(\"initialized\");\n        });\n    }\n\n    _disconnected() {\n        this.btnFirst?.removeEventListener(\"click\", this.getFirst);\n        this.btnPrev?.removeEventListener(\"click\", this.getPrev);\n        this.btnNext?.removeEventListener(\"click\", this.getNext);\n        this.btnLast?.removeEventListener(\"click\", this.getLast);\n        this.selectPerPage?.removeEventListener(\"change\", this.changePerPage);\n        this.inputPage?.removeEventListener(\"input\", this.gotoPage);\n\n        for (const plugin of Object.values(this.plugins)) {\n            plugin.disconnected();\n        }\n    }\n\n    /**\n     * @param {string} field\n     * @returns {Column}\n     */\n    getCol(field) {\n        let found = null;\n\n        for (const col of this.options.columns) {\n            if (col.field === field) {\n                found = col;\n            }\n        }\n        return found;\n    }\n\n    getColProp(field, prop) {\n        const c = this.getCol(field);\n        return c ? c[prop] : null;\n    }\n\n    setColProp(field, prop, val) {\n        const c = this.getCol(field);\n        if (c) {\n            c[prop] = val;\n        }\n    }\n\n    visibleColumns() {\n        return this.options.columns.filter((col) => {\n            return !col.hidden;\n        });\n    }\n\n    hiddenColumns() {\n        return this.options.columns.filter((col) => {\n            return col.hidden === true;\n        });\n    }\n\n    showColumn(field, render = true) {\n        this.setColProp(field, \"hidden\", false);\n\n        // We need to render the whole table otherwise layout fixed won't do its job\n        if (render) this.renderTable();\n\n        dispatch(this, \"columnVisibility\", {\n            col: field,\n            visibility: \"visible\",\n        });\n    }\n\n    hideColumn(field, render = true) {\n        this.setColProp(field, \"hidden\", true);\n\n        // We need to render the whole table otherwise layout fixed won't do its job\n        if (render) this.renderTable();\n\n        dispatch(this, \"columnVisibility\", {\n            col: field,\n            visibility: \"hidden\",\n        });\n    }\n\n    /**\n     * Returns the starting index of actual data\n     * @returns {Number}\n     */\n    startColIndex() {\n        let start = 1;\n        if (this.options.selectable && this.plugins.SelectableRows) {\n            start++;\n        }\n        if (this.options.responsive && this.plugins.ResponsiveGrid && this.plugins.ResponsiveGrid.hasHiddenColumns()) {\n            start++;\n        }\n        return start;\n    }\n\n    /**\n     * @returns {Boolean}\n     */\n    isSticky() {\n        return this.hasAttribute(\"sticky\");\n    }\n\n    /**\n     * @param {Boolean} visibleOnly\n     * @returns {Number}\n     */\n    columnsLength(visibleOnly = false) {\n        let len = 0;\n        // One column per (visible) column\n        for (const col of this.options.columns) {\n            if (visibleOnly && col.hidden) {\n                continue;\n            }\n            if (!col.attr) {\n                len++;\n            }\n        }\n        // Add one col for selectable checkbox at the beginning\n        if (this.options.selectable && this.plugins.SelectableRows) {\n            len++;\n        }\n        // Add one col for actions at the end\n        if (this.options.actions.length && this.plugins.RowActions) {\n            len++;\n        }\n        // Add one col for the responsive toggle\n        if (this.options.responsive && this.plugins.ResponsiveGrid && this.plugins.ResponsiveGrid.hasHiddenColumns()) {\n            len++;\n        }\n        return len;\n    }\n\n    /**\n     * Global configuration and renderTable\n     * This should be called after your data has been loaded\n     */\n    configureUi() {\n        this.table.style.visibility = \"hidden\";\n        this.renderTable();\n        if (this.options.responsive && this.plugins.ResponsiveGrid) {\n            // Let the observer make the table visible\n        } else {\n            this.table.style.visibility = \"visible\";\n        }\n\n        // Store row height for later usage\n        if (!this.rowHeight) {\n            const tr = find(this, \"tbody tr\") || find(this, \"table tr\");\n            if (tr) {\n                this.rowHeight = tr.offsetHeight;\n            }\n        }\n        this.fixPage();\n    }\n\n    filterChanged() {\n        const row = this.querySelector(\"thead tr.dg-head-filters\");\n        if (this.options.filter) {\n            removeAttribute(row, \"hidden\");\n        } else {\n            this.clearFilters();\n            setAttribute(row, \"hidden\", \"\");\n        }\n    }\n\n    reorderChanged() {\n        const headers = findAll(this, \"thead tr.dg-head-columns th\");\n        for (const th of headers) {\n            if (th.classList.contains(\"dg-selectable\") || th.classList.contains(\"dg-actions\")) {\n                continue;\n            }\n            if (this.options.reorder && this.plugins.DraggableHeaders) {\n                th.draggable = true;\n            } else {\n                th.removeAttribute(\"draggable\");\n            }\n        }\n    }\n\n    sortChanged() {\n        this.log(\"toggle sort\");\n\n        const headers = findAll(this, \"thead tr.dg-head-columns th\");\n        for (const th of headers) {\n            const fieldName = th.getAttribute(\"field\");\n            if (\n                th.classList.contains(\"dg-not-sortable\") ||\n                (!this.fireEvents && fieldName === this.options.defaultSort)\n            ) {\n                return;\n            }\n            if (this.options.sort && !this.getColProp(fieldName, \"noSort\")) {\n                setAttribute(th, \"aria-sort\", \"none\");\n            } else {\n                removeAttribute(th, \"aria-sort\");\n            }\n        }\n    }\n\n    selectableChanged() {\n        this.renderTable();\n    }\n\n    addRow(row) {\n        if (!Array.isArray(this.originalData)) {\n            return;\n        }\n        this.log(\"add row\");\n        this.originalData.push(row);\n        this.data = this.originalData.slice();\n        this.sortData();\n    }\n\n    /**\n     * @param {any} value Value to remove. Defaults to last row.\n     * @param {String} key The key of the item to remove. Defaults to first column\n     */\n    removeRow(value = null, key = null) {\n        if (!Array.isArray(this.originalData)) {\n            return;\n        }\n\n        let v = value;\n        let k = key;\n        if (k === null) {\n            k = this.options.columns[0].field;\n        }\n        if (v === null) {\n            v = this.originalData[this.originalData.length - 1][k];\n        }\n        this.log(`remove row ${k}:${v}`);\n        for (let i = 0; i < this.originalData.length; i++) {\n            if (this.originalData[i][k] === v) {\n                this.originalData.splice(i, 1);\n                break;\n            }\n        }\n        this.data = this.originalData.slice();\n        this.sortData();\n    }\n\n    /**\n     * @param {String} key Return a specific key (eg: id) instead of the whole row\n     * @returns {Array}\n     */\n    getSelection(key = null) {\n        if (!this.plugins.SelectableRows) {\n            return [];\n        }\n        return this.plugins.SelectableRows.getSelection(key);\n    }\n\n    getData() {\n        return this.originalData;\n    }\n\n    clearData() {\n        // Already empty\n        if (this.data.length === 0) {\n            return;\n        }\n        this.data = this.originalData = [];\n        this.renderBody();\n    }\n\n    /**\n     * Preloads the data intended to bypass the initial fetch operation, allowing for faster intial page load time.\n     * Subsequent grid actions after initialization will operate as normal.\n     * @param {Object} data - an object with meta ({total, filtered, start}) and data (array of objects) properties.\n     */\n    preload(data) {\n        const metaKey = this.options.serverParams.metaKey;\n        const dataKey = this.options.serverParams.dataKey;\n        if (data?.[metaKey]) {\n            this.meta = data[metaKey];\n        }\n        if (data?.[dataKey]) {\n            this.data = this.originalData = data[dataKey];\n        }\n    }\n\n    refresh(cb = null) {\n        this.data = this.originalData = [];\n        return this.reload(cb);\n    }\n\n    reload(cb = null) {\n        this.log(\"reload\");\n\n        // If the data was cleared, we need to render again\n        const needRender = !this.originalData?.length;\n        this.fixPage();\n        // @ts-ignore\n        this.loadData().finally(() => {\n            if (this.hasDataError) return;\n            // If we load data from the server, we redraw the table body\n            // Otherwise, we just need to paginate\n            this.options.server || needRender ? this.renderBody() : this.paginate();\n            if (cb) {\n                cb();\n            }\n        });\n    }\n\n    /**\n     * @returns {Promise}\n     */\n    loadData() {\n        const flagEmpty = () => !this.data.length && this.classList.add(\"dg-empty\");\n        const tbody = this.tbody;\n\n        // We already have some data\n        if (this.meta || this.originalData || this.isInit) {\n            // We don't use server side data\n            if (!this.options.server || (this.options.server && !this.fireEvents)) {\n                this.log(\"skip loadData\");\n                flagEmpty();\n                return new Promise((resolve) => {\n                    resolve();\n                });\n            }\n        }\n        this.log(\"loadData\");\n        this.loading = true;\n        this.classList.add(\"dg-loading\");\n        this.classList.remove(\"dg-empty\", \"dg-network-error\");\n        return (\n            this.fetchData()\n                .then((response) => {\n                    // We can get a straight array or an object\n                    if (Array.isArray(response)) {\n                        this.data = response;\n                    } else {\n                        // Object must contain data key\n                        if (!response[this.options.serverParams.dataKey]) {\n                            console.error(\n                                \"Invalid response, it should contain a data key with an array or be a plain array\",\n                                response,\n                            );\n                            this.options.url = null;\n                            return;\n                        }\n\n                        // We may have a config object\n                        this.options = Object.assign(\n                            this.options,\n                            response[this.options.serverParams.optionsKey] ?? {},\n                        );\n                        // It should return meta data (see metaFilteredKey)\n                        this.meta = response[this.options.serverParams.metaKey] ?? {};\n                        this.data = response[this.options.serverParams.dataKey];\n                    }\n                    this.originalData = this.data.slice();\n                    this.fixPage();\n\n                    // Make sure we have a proper set of columns\n                    if (this.options.columns.length === 0 && this.originalData.length) {\n                        this.options.columns = this.convertColumns(Object.keys(this.originalData[0]));\n                    } else {\n                        this.options.columns = this.convertColumns(this.options.columns);\n                    }\n                })\n                .catch((err) => {\n                    this.log(err);\n                    tbody.setAttribute(\n                        \"data-empty\",\n                        this.options.errorMessage ||\n                            err.message?.replace(/^\\s+|\\r\\n|\\n|\\r$/g, \"\") ||\n                            labels.networkError,\n                    );\n                    this.classList.add(\"dg-empty\", \"dg-network-error\");\n                    dispatch(this, \"loadDataFailed\", err);\n                })\n                // @ts-ignore\n                .finally(() => {\n                    flagEmpty();\n                    if (!this.hasDataError && tbody.getAttribute(\"data-empty\") !== this.labels.noData) {\n                        tbody.setAttribute(\"data-empty\", this.labels.noData);\n                    }\n                    this.classList.remove(\"dg-loading\");\n                    setAttribute(this.table, \"aria-rowcount\", this.data.length);\n                    this.loading = false;\n                })\n        );\n    }\n\n    getFirst() {\n        if (this.loading) {\n            return;\n        }\n        this.page = 1;\n    }\n\n    getLast() {\n        if (this.loading) {\n            return;\n        }\n        this.page = this.pages;\n    }\n\n    getPrev() {\n        if (this.loading) {\n            return;\n        }\n        this.page = this.page - 1;\n    }\n\n    getNext() {\n        if (this.loading) {\n            return;\n        }\n        this.page = this.page + 1;\n    }\n\n    gotoPage(event) {\n        if (event.type === \"keypress\") {\n            const key = event.keyCode || event.key;\n            if (key === 13 || key === \"Enter\") {\n                event.preventDefault();\n            } else {\n                return;\n            }\n        }\n        this.page = Number.parseInt(this.inputPage.value);\n    }\n\n    getSort() {\n        const col = this.querySelector(\"thead tr.dg-head-columns th[aria-sort$='scending']\");\n        if (col) {\n            return col.getAttribute(\"field\");\n        }\n        return this.options.defaultSort;\n    }\n\n    getSortDir() {\n        const col = this.querySelector(\"thead tr.dg-head-columns th[aria-sort$='scending']\");\n        if (col) {\n            return col.getAttribute(\"aria-sort\") || \"\";\n        }\n        return \"\";\n    }\n\n    getFilters() {\n        const filters = [];\n        const inputs = findAll(this, this._filterSelector);\n        for (const input of inputs) {\n            filters[input.dataset.name] = input.value;\n        }\n        return filters;\n    }\n\n    clearFilters() {\n        const inputs = findAll(this, this._filterSelector);\n        for (const input of inputs) {\n            input.value = \"\";\n        }\n        this.filterData();\n    }\n\n    filterData() {\n        this.log(\"filter data\");\n\n        this.page = 1;\n\n        if (this.options.server) {\n            this.reload();\n        } else {\n            this.data = this.originalData?.slice() ?? [];\n\n            // Look for rows matching the filters\n            const inputs = findAll(this, this._filterSelector);\n            for (const input of inputs) {\n                const value = input.value;\n                if (value) {\n                    const name = input.dataset.name;\n                    this.data = this.data.filter((item) => {\n                        const str = `${item[name]}`;\n                        return str.toLowerCase().indexOf(value.toLowerCase()) !== -1;\n                    });\n                }\n            }\n            this.pageChanged();\n\n            const col = this.querySelector(\"thead tr.dg-head-columns th[aria-sort$='scending']\");\n            if (this.options.sort && col) {\n                this.sortData();\n            } else {\n                this.renderBody();\n            }\n        }\n    }\n\n    /**\n     * Data will be sorted then rendered using renderBody\n     * @param {Element} baseCol The column that was clicked or null to use current sort\n     */\n    sortData(baseCol = null) {\n        this.log(\"sort data\");\n\n        let col = baseCol;\n\n        // Early exit\n        if (col && this.getColProp(col.getAttribute(\"field\"), \"noSort\")) {\n            this.log(\"sorting prevented because column is not sortable\");\n            return;\n        }\n        if (this.plugins.ColumnResizer?.isResizing) {\n            this.log(\"sorting prevented because resizing\");\n            return;\n        }\n        if (this.loading) {\n            this.log(\"sorting prevented because loading\");\n            return;\n        }\n\n        // We clicked on a column, update sort state\n        if (col !== null) {\n            // Remove active sort if any\n            const haveClasses = (c) => [\"dg-selectable\", \"dg-actions\", \"dg-responsive-toggle\"].includes(c);\n\n            const headers = findAll(this, \"thead tr:first-child th\");\n            for (const th of headers) {\n                // @ts-ignore\n                if ([...th.classList].some(haveClasses)) {\n                    continue;\n                }\n                if (th !== col) {\n                    th.setAttribute(\"aria-sort\", \"none\");\n                }\n            }\n\n            // Set tristate col\n            if (!col.hasAttribute(\"aria-sort\") || col.getAttribute(\"aria-sort\") === \"none\") {\n                col.setAttribute(\"aria-sort\", \"ascending\");\n            } else if (col.getAttribute(\"aria-sort\") === \"ascending\") {\n                col.setAttribute(\"aria-sort\", \"descending\");\n            } else if (col.getAttribute(\"aria-sort\") === \"descending\") {\n                col.setAttribute(\"aria-sort\", \"none\");\n            }\n        } else {\n            // Or fetch current sort\n            col = this.querySelector(\"thead tr.dg-head-columns th[aria-sort$='scending']\");\n        }\n\n        if (this.options.server) {\n            // Reload data with updated sort\n            this.loadData().finally(() => {\n                this.renderBody();\n            });\n        } else {\n            const sort = col ? col.getAttribute(\"aria-sort\") : \"none\";\n            if (sort === \"none\") {\n                const stack = [];\n\n                // Restore order while keeping filters\n                this.originalData?.some((itemA) => {\n                    this.data.some((itemB) => {\n                        if (JSON.stringify(itemA) === JSON.stringify(itemB)) {\n                            stack.push(itemB);\n                            return true;\n                        }\n                        return false;\n                    });\n                    return stack.length === this.data.length;\n                });\n\n                this.data = stack;\n            } else {\n                const field = col.getAttribute(\"field\");\n                this.data.sort((a, b) => {\n                    if (!isNaN(a[field]) && !isNaN(b[field])) {\n                        return sort === \"ascending\" ? a[field] - b[field] : b[field] - a[field];\n                    }\n                    const valA = sort === \"ascending\" ? a[field].toUpperCase() : b[field].toUpperCase();\n                    const valB = sort === \"ascending\" ? b[field].toUpperCase() : a[field].toUpperCase();\n\n                    switch (true) {\n                        case valA > valB:\n                            return 1;\n                        case valA < valB:\n                            return -1;\n                        case valA === valB:\n                            return 0;\n                    }\n                });\n            }\n            this.renderBody();\n        }\n    }\n\n    _sort(columnName, sortDir) {\n        const col = this.querySelector(`.dg-head-columns th[field=${columnName}]`);\n        const dir = sortDir === \"ascending\" ? \"none\" : sortDir === \"descending\" ? \"ascending\" : \"descending\";\n        col?.setAttribute(\"aria-sort\", dir);\n        this.sortData(col);\n    }\n\n    sortAsc = (columnName) => this._sort(columnName, \"ascending\");\n    sortDesc = (columnName) => this._sort(columnName, \"descending\");\n    sortNone = (columnName) => this._sort(columnName, \"none\");\n\n    fetchData() {\n        if (!this.options.url) {\n            return new Promise((resolve, reject) => reject(\"No url set\"));\n        }\n\n        let base = window.location.href;\n        // Fix trailing slash if no extension is present\n        if (!base.split(\"/\").pop().includes(\".\")) {\n            base += base.endsWith(\"/\") ? \"\" : \"/\";\n        }\n        const url = new URL(this.options.url, base);\n        let params = {\n            r: Date.now(),\n        };\n        if (this.options.server) {\n            // 0 based\n            params[this.options.serverParams.start] = this.page - 1;\n            params[this.options.serverParams.length] = this.options.perPage;\n            if (this.options.filter) params[this.options.serverParams.search] = this.getFilters();\n            params[this.options.serverParams.sort] = this.getSort() || \"\";\n            params[this.options.serverParams.sortDir] = this.getSortDir();\n\n            // extra params ?\n            if (this.meta?.[this.options.serverParams.paramsKey]) {\n                params = Object.assign(params, this.meta[this.options.serverParams.paramsKey]);\n            }\n        }\n\n        appendParamsToUrl(url, params);\n\n        return fetch(url).then((response) => {\n            const newError = new Error(response.statusText || labels.networkError);\n            if (!response.ok) {\n                // @ts-ignore\n                newError.response = response;\n                throw newError;\n            }\n            return response\n                .clone()\n                .json()\n                .catch((err) => {\n                    let error = err;\n                    if (!this.options.debug) {\n                        error = newError;\n                    }\n                    error.response = response;\n                    throw error;\n                });\n        });\n    }\n\n    renderTable() {\n        this.log(\"render table\");\n\n        if (this.options.menu && this.plugins.ContextMenu) {\n            this.plugins.ContextMenu.createMenu();\n        }\n\n        let sortedColumn;\n\n        this.renderHeader();\n        if (this.options.defaultSort) {\n            // We can have a default sort even with sort disabled\n            sortedColumn = this.querySelector(`thead tr.dg-head-columns th[field=\"${this.options.defaultSort}\"]`);\n        }\n\n        if (sortedColumn) {\n            this.sortData(sortedColumn);\n        } else {\n            this.renderBody();\n        }\n\n        this.renderFooter();\n    }\n\n    /**\n     * Create table header\n     * - One row for the column headers\n     * - One row for the filters\n     */\n    renderHeader() {\n        this.log(\"render header\");\n\n        const thead = this.thead;\n        this.createColumnHeaders(thead);\n        this.createColumnFilters(thead);\n\n        if (this.options.resizable && this.plugins.ColumnResizer) {\n            this.plugins.ColumnResizer.renderResizer(labels.resizeColumn);\n        }\n\n        dispatch(this, \"headerRendered\");\n    }\n\n    renderFooter() {\n        this.log(\"render footer\");\n\n        const tfoot = this.tfoot;\n        const td = tfoot.querySelector(\"td\");\n        tfoot.removeAttribute(\"hidden\");\n        setAttribute(td, \"colspan\", this.columnsLength(true));\n        tfoot.style.display = \"\";\n    }\n\n    /**\n     * Create the column headers based on column definitions and set options\n     * @param {HTMLTableSectionElement} thead\n     */\n    createColumnHeaders(thead) {\n        // @link https://stackoverflow.com/questions/21064101/understanding-offsetwidth-clientwidth-scrollwidth-and-height-respectively\n        const availableWidth = this.clientWidth;\n        const colMaxWidth = Math.round((availableWidth / this.columnsLength(true)) * 2);\n\n        let idx = 0;\n        let tr;\n\n        // Create row\n        tr = ce(\"tr\");\n        this.headerRow = tr;\n        tr.setAttribute(\"role\", \"row\");\n        tr.setAttribute(\"aria-rowindex\", \"1\");\n        tr.setAttribute(\"class\", \"dg-head-columns\");\n\n        // We need a real th from the dom to compute the size\n        let sampleTh = thead.querySelector(\"tr.dg-head-columns th\");\n        if (!sampleTh) {\n            sampleTh = ce(\"th\");\n            thead.querySelector(\"tr\").appendChild(sampleTh);\n        }\n\n        if (this.options.selectable && this.plugins.SelectableRows) {\n            this.plugins.SelectableRows.createHeaderCol(tr);\n        }\n        if (this.options.responsive && this.plugins.ResponsiveGrid && this.plugins.ResponsiveGrid.hasHiddenColumns()) {\n            this.plugins.ResponsiveGrid.createHeaderCol(tr);\n        }\n\n        // Create columns\n        idx = 0;\n        let totalWidth = 0;\n\n        for (const column of this.options.columns) {\n            if (column.attr) {\n                continue;\n            }\n            const colIdx = idx + this.startColIndex();\n            const th = ce(\"th\");\n            th.setAttribute(\"scope\", \"col\");\n            th.setAttribute(\"role\", \"columnheader button\");\n            th.setAttribute(\"aria-colindex\", `${colIdx}`);\n            th.setAttribute(\"id\", randstr(\"dg-col-\"));\n            if (this.options.sort) {\n                th.setAttribute(\"aria-sort\", \"none\");\n            }\n            th.setAttribute(\"field\", column.field);\n            if (this.plugins.ResponsiveGrid && this.options.responsive) {\n                setAttribute(th, \"data-responsive\", column.responsive || \"\");\n            }\n            // Make sure the header fits (+ add some room for sort icon if necessary)\n            const computedWidth = getTextWidth(column.title, sampleTh, true) + 20;\n            th.dataset.minWidth = `${computedWidth}`;\n            applyColumnDefinition(th, column);\n            th.tabIndex = 0;\n            th.textContent = column.title;\n\n            let w = 0;\n            // Autosize small based on first/last row ?\n            // Take into account minWidth of the header and max available size based on col numbers\n            if (this.options.autosize && this.plugins.AutosizeColumn) {\n                const colAvailableWidth = Math.min(availableWidth - totalWidth, colMaxWidth);\n                w = this.plugins.AutosizeColumn.computeSize(\n                    th,\n                    column,\n                    Number.parseInt(th.dataset.minWidth),\n                    colAvailableWidth,\n                );\n            } else {\n                w = Math.max(Number.parseInt(th.dataset.minWidth), Number.parseInt(th.getAttribute(\"width\")));\n            }\n\n            setAttribute(th, \"width\", w);\n            if (column.hidden) {\n                th.setAttribute(\"hidden\", \"\");\n            } else {\n                totalWidth += w;\n            }\n\n            // Reorder columns with drag/drop\n            if (this.options.reorder && this.plugins.DraggableHeaders) {\n                this.plugins.DraggableHeaders.makeHeaderDraggable(th);\n            }\n\n            tr.appendChild(th);\n            idx++;\n        }\n\n        // There is too much available width, and we want to avoid fixed layout to split remaining amount\n        if (totalWidth < availableWidth) {\n            const visibleCols = findAll(tr, \"th:not([hidden],.dg-not-resizable)\");\n            if (visibleCols.length) {\n                const lastCol = visibleCols[visibleCols.length - 1];\n                removeAttribute(lastCol, \"width\");\n            }\n        }\n\n        // Actions\n        if (this.options.actions.length && this.plugins.RowActions) {\n            this.plugins.RowActions.makeActionHeader(tr);\n        }\n\n        thead.replaceChild(tr, thead.querySelector(\"tr.dg-head-columns\"));\n\n        // Once columns are inserted, we have an actual dom to query\n        if (thead.offsetWidth > availableWidth) {\n            this.log(`adjust width to fix size, ${thead.offsetWidth} > ${availableWidth}`);\n            const scrollbarWidth = this.offsetWidth - this.clientWidth;\n            let diff = thead.offsetWidth - availableWidth - scrollbarWidth;\n            if (this.options.responsive && this.plugins.ResponsiveGrid) {\n                diff += scrollbarWidth;\n            }\n            // Remove diff for columns that can afford it\n            const thWithWidth = findAll(tr, \"th[width]\");\n\n            for (const th of thWithWidth) {\n                if (hasClass(th, \"dg-not-resizable\")) {\n                    continue;\n                }\n                if (diff <= 0) {\n                    continue;\n                }\n                const actualWidth = Number.parseInt(th.getAttribute(\"width\"));\n                const minWidth = th.dataset.minWidth ? Number.parseInt(th.dataset.minWidth) : 0;\n                if (actualWidth > minWidth) {\n                    let newWidth = actualWidth - diff;\n                    if (newWidth < minWidth) {\n                        newWidth = minWidth;\n                    }\n                    diff -= actualWidth - newWidth;\n                    setAttribute(th, \"width\", newWidth);\n                }\n            }\n        }\n\n        // Context menu\n        if (this.options.menu && this.plugins.ContextMenu) {\n            this.plugins.ContextMenu.attachContextMenu();\n        }\n\n        // Sort col on click\n        const rowsWithSort = findAll(tr, \"[aria-sort]\");\n        for (const sortableRow of rowsWithSort) {\n            sortableRow.addEventListener(\"click\", () => this.sortData(sortableRow));\n        }\n\n        setAttribute(this.table, \"aria-colcount\", this.columnsLength(true));\n    }\n\n    createColumnFilters(thead) {\n        let idx = 0;\n        let tr;\n\n        // Create row for filters\n        tr = ce(\"tr\");\n        this.filterRow = tr;\n        tr.setAttribute(\"role\", \"row\");\n        tr.setAttribute(\"aria-rowindex\", \"2\");\n        tr.setAttribute(\"class\", \"dg-head-filters\");\n        if (!this.options.filter) {\n            tr.setAttribute(\"hidden\", \"\");\n        }\n\n        if (this.options.selectable && this.plugins.SelectableRows) {\n            this.plugins.SelectableRows.createFilterCol(tr);\n        }\n        if (this.options.responsive && this.plugins.ResponsiveGrid && this.plugins.ResponsiveGrid.hasHiddenColumns()) {\n            this.plugins.ResponsiveGrid.createFilterCol(tr);\n        }\n\n        for (const column of this.options.columns) {\n            if (column.attr) {\n                continue;\n            }\n            const colIdx = idx + this.startColIndex();\n            const relatedTh = thead.querySelector(`tr.dg-head-columns th[aria-colindex=\"${colIdx}\"]`);\n            if (!relatedTh) {\n                console.warn(\"Related th not found\", colIdx);\n                continue;\n            }\n            const th = ce(\"th\");\n            th.setAttribute(\"aria-colindex\", `${colIdx}`);\n\n            const filter = this.createFilterElement(column, relatedTh);\n            if (!this.options.filter) {\n                th.tabIndex = 0;\n            } else {\n                filter.tabIndex = 0;\n            }\n\n            if (column.hidden) {\n                th.setAttribute(\"hidden\", \"\");\n            }\n\n            th.appendChild(filter);\n            tr.appendChild(th);\n            idx++;\n        }\n\n        // Actions\n        if (this.options.actions.length && this.plugins.RowActions) {\n            this.plugins.RowActions.makeActionFilter(tr);\n        }\n\n        thead.replaceChild(tr, thead.querySelector(\"tr.dg-head-filters\"));\n\n        if (typeof this.options.filterKeypressDelay !== \"number\" || this.options.filterOnEnter)\n            this.options.filterKeypressDelay = 0;\n\n        // Filter content by field events\n        const filteredRows = findAll(tr, this._filterSelector);\n        for (const el of filteredRows) {\n            const eventName = /select/i.test(el.tagName) ? \"change\" : \"keyup\";\n            const eventHandler = debounce((e) => {\n                const key = e.keyCode || e.key;\n                const isKeyPressFilter = !this.options.filterOnEnter && !this._excludedKeys.some((k) => k === key);\n                if (key === 13 || key === \"Enter\" || isKeyPressFilter || e.type === \"change\") {\n                    this.filterData.call(this);\n                }\n            }, this.options.filterKeypressDelay);\n            el.addEventListener(eventName, eventHandler);\n        }\n    }\n\n    createFilterElement(column, relatedTh) {\n        const isSelect = column.filterType === \"select\";\n        const filter = isSelect ? ce(\"select\") : ce(\"input\");\n        if (isSelect) {\n            if (!Array.isArray(column.filterList)) {\n                // Gets unique values from column records\n                const uniqueValues = [...new Set((this.data ?? []).map((e) => e[column.field]))]\n                    .filter((v) => v)\n                    .sort();\n                column.filterList = [column.firstFilterOption || this.defaultColumn.firstFilterOption].concat(\n                    uniqueValues.map((e) => ({ value: e, text: e })),\n                );\n            }\n\n            for (const e of column.filterList) {\n                const opt = ce(\"option\");\n                opt.value = e.value;\n                opt.text = e.text;\n\n                if (filter instanceof HTMLSelectElement) {\n                    filter.add(opt);\n                }\n            }\n        } else {\n            //@ts-ignore\n            filter.type = \"text\";\n            filter.inputMode = \"search\";\n            filter.autocomplete = \"off\";\n            filter.spellcheck = false;\n        }\n        // Allows binding filter to this column\n        filter.dataset.name = column.field;\n        filter.id = randstr(\"dg-filter-\");\n        // Don't use aria-label as it triggers autocomplete\n        filter.setAttribute(\"aria-labelledby\", relatedTh.getAttribute(\"id\"));\n        return filter;\n    }\n\n    /**\n     * Render the data as rows in tbody\n     * It will call paginate() at the end\n     */\n    renderBody() {\n        this.log(\"render body\");\n        let tr;\n        let td;\n        let idx;\n        const tbody = ce(\"tbody\");\n\n        this.data.forEach((item, i) => {\n            tr = ce(\"tr\");\n            setAttribute(tr, \"role\", \"row\");\n            setAttribute(tr, \"hidden\", \"\");\n            setAttribute(tr, \"aria-rowindex\", i + 1);\n            tr.tabIndex = 0;\n\n            if (this.options.selectable && this.plugins.SelectableRows) {\n                this.plugins.SelectableRows.createDataCol(tr);\n            }\n            if (\n                this.options.responsive &&\n                this.plugins.ResponsiveGrid &&\n                this.plugins.ResponsiveGrid.hasHiddenColumns()\n            ) {\n                this.plugins.ResponsiveGrid.createDataCol(tr);\n            }\n\n            // Expandable\n            if (this.options.expand) {\n                tr.classList.add(\"dg-expandable\");\n\n                on(tr, \"click\", (ev) => {\n                    if (this.plugins.ResponsiveGrid) {\n                        this.plugins.ResponsiveGrid.blockObserver();\n                    }\n                    toggleClass(ev.currentTarget, \"dg-expanded\");\n                    if (this.plugins.ResponsiveGrid) {\n                        this.plugins.ResponsiveGrid.unblockObserver();\n                    }\n                });\n            }\n\n            idx = 0;\n\n            for (const column of this.options.columns) {\n                if (!column) {\n                    console.error(\"Empty column found!\", this.options.columns);\n                }\n                // It should be applied as an attr of the row\n                if (column.attr) {\n                    if (item[column.field]) {\n                        // Special case if we try to write over the class attr\n                        if (column.attr === \"class\") {\n                            addClass(tr, item[column.field]);\n                        } else {\n                            tr.setAttribute(column.attr, item[column.field]);\n                        }\n                    }\n                    return;\n                }\n                td = ce(\"td\");\n                td.setAttribute(\"role\", \"gridcell\");\n                td.setAttribute(\"aria-colindex\", `${idx}${this.startColIndex()}`);\n                applyColumnDefinition(td, column);\n                // This is required for pure css responsive layout\n                td.setAttribute(\"data-name\", column.title);\n                td.tabIndex = -1;\n\n                // Inline editing ...\n                if (column.editable && this.plugins.EditableColumn) {\n                    addClass(td, \"dg-editable-col\");\n                    this.plugins.EditableColumn.makeEditableInput(td, column, item, i);\n                } else {\n                    // ... or formatting\n                    const v = item[column.field] ?? \"\";\n                    let tv;\n                    // TODO: make this modular\n                    switch (column.transform) {\n                        case \"uppercase\":\n                            tv = v.toUpperCase();\n                            break;\n                        case \"lowercase\":\n                            tv = v.toLowerCase();\n                            break;\n                        default:\n                            tv = v;\n                            break;\n                    }\n                    if (column.format) {\n                        // Only use formatting with values or if defaultFormatValue is set\n                        if (column.defaultFormatValue !== undefined && (tv === \"\" || tv === null)) {\n                            tv = `${column.defaultFormatValue}`;\n                        }\n                        if (typeof column.format === \"string\" && tv) {\n                            td.innerHTML = interpolate(\n                                // @ts-ignore\n                                column.format,\n                                Object.assign(\n                                    {\n                                        _v: v,\n                                        _tv: tv,\n                                    },\n                                    item,\n                                ),\n                            );\n                        } else if (column.format instanceof Function) {\n                            const val = column.format.call(this, { column, rowData: item, cellData: tv, td, tr });\n                            td.innerHTML = val || tv || v;\n                        }\n                    } else {\n                        td.textContent = tv;\n                    }\n                }\n                tr.appendChild(td);\n                idx++;\n            }\n\n            // Actions\n            if (this.options.actions.length && this.plugins.RowActions) {\n                this.plugins.RowActions.makeActionRow(tr, item);\n            }\n\n            tbody.appendChild(tr);\n        });\n\n        tbody.setAttribute(\"role\", \"rowgroup\");\n\n        // Keep data empty message\n        const prev = this.tbody;\n        tbody.setAttribute(\"data-empty\", prev.getAttribute(\"data-empty\"));\n        this.table.replaceChild(tbody, prev);\n\n        if (this.plugins.FixedHeight) {\n            this.plugins.FixedHeight.createFakeRow();\n        }\n\n        this.paginate();\n\n        if (this.plugins.SelectableRows) {\n            this.plugins.SelectableRows.shouldSelectAll(tbody);\n        }\n\n        this.data.length && this.classList.remove(\"dg-empty\");\n\n        dispatch(this, \"bodyRendered\");\n    }\n\n    paginate() {\n        this.log(\"paginate\");\n\n        const total = this.totalRecords();\n        const p = this.page || 1;\n        const tbody = this.tbody;\n        const tfoot = this.tfoot;\n        const bodyRows = findAll(tbody, \"tr\");\n\n        // Refresh page count in case we added/removed a page\n        this.pages = this.totalPages();\n\n        let index;\n        let high = p * this.options.perPage;\n        let low = high - this.options.perPage + 1;\n\n        if (high > total) {\n            high = total;\n        }\n        if (!total) {\n            low = 0;\n        }\n\n        // Display all rows within the set indexes\n        // For server side paginated grids, we display everything\n        // since the server is taking care of actual pagination\n        for (const tr of bodyRows) {\n            if (this.options.server) {\n                removeAttribute(tr, \"hidden\");\n                continue;\n            }\n            index = Number(getAttribute(tr, \"aria-rowindex\"));\n            if (index > high || index < low) {\n                setAttribute(tr, \"hidden\", \"\");\n            } else {\n                removeAttribute(tr, \"hidden\");\n            }\n        }\n\n        if (this.options.selectable && this.plugins.SelectableRows) {\n            this.plugins.SelectableRows.clearCheckboxes(tbody);\n        }\n\n        // Store default height and update styles if needed\n        if (this.plugins.FixedHeight) {\n            this.plugins.FixedHeight.updateFakeRow();\n        }\n\n        // Enable/disable buttons if shown\n        if (this.btnFirst) {\n            this.btnFirst.disabled = this.page <= 1;\n            this.btnPrev.disabled = this.page <= 1;\n            this.btnNext.disabled = this.page >= this.pages;\n            this.btnLast.disabled = this.page >= this.pages;\n        }\n        tfoot.querySelector(\".dg-low\").textContent = low.toString();\n        tfoot.querySelector(\".dg-high\").textContent = high.toString();\n        tfoot.querySelector(\".dg-total\").textContent = `${this.totalRecords()}`;\n        tfoot.toggleAttribute(\"hidden\", this.options.autohidePager && this.options.perPage > this.totalRecords());\n    }\n\n    /**\n     * @returns {number}\n     */\n    totalPages() {\n        return Math.ceil(this.totalRecords() / this.options.perPage);\n    }\n\n    /**\n     * @returns {number}\n     */\n    totalRecords() {\n        if (this.options.server) {\n            return this.meta?.[this.options.serverParams.metaFilteredKey] || 0;\n        }\n        return this.data.length;\n    }\n}\n\nexport default DataGrid;\n", "/** @typedef {import(\"../data-grid\").default} DataGrid */\n\nclass BasePlugin {\n    /**\n     * @param {DataGrid} grid\n     */\n    constructor(grid) {\n        this.grid = grid;\n    }\n\n    connected() {}\n\n    disconnected() {}\n\n    /**\n     * Handle events within the plugin\n     * @link https://gist.github.com/WebReflection/ec9f6687842aa385477c4afca625bbf4#handling-events\n     * @param {Event} event\n     */\n    handleEvent(event) {\n        if (this[`on${event.type}`]) {\n            this[`on${event.type}`](event);\n        }\n    }\n}\n\nexport default BasePlugin;\n", "import BasePlugin from \"../core/base-plugin.js\";\nimport elementOffset from \"../utils/elementOffset.js\";\nimport {\n    addClass,\n    dispatch,\n    findAll,\n    getAttribute,\n    hasClass,\n    off,\n    on,\n    removeAttribute,\n    removeClass,\n    setAttribute,\n} from \"../utils/shortcuts.js\";\n\n/**\n * Allows to resize columns\n */\nclass ColumnResizer extends BasePlugin {\n    constructor(grid) {\n        super(grid);\n        this.isResizing = false;\n    }\n\n    /**\n     * @param {String} resizeLabel\n     */\n    renderResizer(resizeLabel) {\n        const grid = this.grid;\n        const table = grid.table;\n        const cols = findAll(grid, \"thead tr.dg-head-columns th\");\n\n        for (const col of cols) {\n            if (hasClass(col, \"dg-not-resizable\")) {\n                continue;\n            }\n            // Create a resizer element\n            const resizer = document.createElement(\"div\");\n            addClass(resizer, \"dg-resizer\");\n            resizer.ariaLabel = resizeLabel;\n\n            // Add a resizer element to the column\n            col.appendChild(resizer);\n\n            // Handle resizing\n            let startX = 0;\n            let startW = 0;\n            let remainingSpace = 0;\n            let max = 0;\n\n            const mouseMoveHandler = (e) => {\n                if (e.clientX > max) {\n                    return;\n                }\n                const newWidth = startW + (e.clientX - startX);\n                if (col.dataset.minWidth && newWidth > Number.parseInt(col.dataset.minWidth)) {\n                    setAttribute(col, \"width\", newWidth);\n                }\n            };\n\n            // When user releases the mouse, remove the existing event listeners\n            const mouseUpHandler = () => {\n                grid.log(\"resized column\");\n\n                // Prevent accidental sorting if mouse is not over resize handler\n                setTimeout(() => {\n                    this.isResizing = false;\n                }, 0);\n\n                removeClass(resizer, \"dg-resizer-active\");\n                if (grid.options.reorder) {\n                    col.draggable = true;\n                }\n                col.style.overflow = \"hidden\";\n\n                // Remove handlers\n                off(document, \"mousemove\", mouseMoveHandler);\n                off(document, \"mouseup\", mouseUpHandler);\n\n                dispatch(grid, \"columnResized\", {\n                    col: getAttribute(col, \"field\"),\n                    width: getAttribute(col, \"width\"),\n                });\n            };\n\n            // Otherwise it could sort the col\n            on(resizer, \"click\", (e) => {\n                e.stopPropagation();\n            });\n\n            on(resizer, \"mousedown\", (e) => {\n                e.stopPropagation();\n\n                this.isResizing = true;\n\n                const target = e.target;\n                const currentCols = findAll(grid, \"dg-head-columns th\");\n                const visibleCols = currentCols.filter((col) => {\n                    return !col.hasAttribute(\"hidden\");\n                });\n                const columnIndex = visibleCols.findIndex((column) => column === target.parentNode);\n                grid.log(\"resize column\");\n\n                addClass(resizer, \"dg-resizer-active\");\n\n                // Make sure we don't drag it\n                removeAttribute(col, \"draggable\");\n\n                // Allow overflow when resizing\n                col.style.overflow = \"visible\";\n\n                // Show full column height (-1 to avoid scrollbar)\n                resizer.style.height = `${table.offsetHeight - 1}px`;\n\n                // Register initial data\n                startX = e.clientX;\n                startW = col.offsetWidth;\n\n                remainingSpace = (visibleCols.length - columnIndex) * 30;\n                max = elementOffset(target).left + grid.offsetWidth - remainingSpace;\n\n                // Remove width from next columns to allow auto layout\n                setAttribute(col, \"width\", startW);\n                for (let j = 0; j < visibleCols.length; j++) {\n                    if (j > columnIndex) {\n                        removeAttribute(cols[j], \"width\");\n                    }\n                }\n\n                // Attach handlers\n                on(document, \"mousemove\", mouseMoveHandler);\n                on(document, \"mouseup\", mouseUpHandler);\n            });\n        }\n    }\n}\n\nexport default ColumnResizer;\n", "/**\n * @param {HTMLElement} el\n * @param {String} type\n * @param {String} prop\n * @returns {HTMLElement}\n */\nexport default function getParentElement(el, type, prop = \"nodeName\") {\n    let parent = el;\n    while (parent[prop] !== type) {\n        parent = parent.parentElement;\n    }\n    return parent;\n}\n", "import BasePlugin from \"../core/base-plugin.js\";\nimport getParentElement from \"../utils/getParentElement.js\";\nimport { find, off, on, removeAttribute, setAttribute } from \"../utils/shortcuts.js\";\n\n/**\n * Create a right click menu on the headers\n */\nclass ContextMenu extends BasePlugin {\n    connected() {\n        /**\n         * @type {HTMLUListElement}\n         */\n        this.menu = this.grid.querySelector(\".dg-menu\");\n    }\n    disconnected() {\n        if (this.grid.headerRow) {\n            off(this.grid.headerRow, \"contextmenu\", this);\n        }\n    }\n\n    attachContextMenu() {\n        const grid = this.grid;\n        on(grid.headerRow, \"contextmenu\", this);\n    }\n\n    onchange(e) {\n        const grid = this.grid;\n        const t = e.target;\n        const field = t.dataset.name;\n        if (t.checked) {\n            grid.showColumn(field);\n        } else {\n            // Prevent hidding last\n            if (grid.visibleColumns().length <= 1) {\n                // Restore checkbox value\n                t.checked = true;\n                return;\n            }\n            grid.hideColumn(field);\n        }\n        grid.fixPage(); //fixes Chrome footer flexbox resize issues that may appear when there is a large number of columns (i.e. more than 10).\n    }\n\n    oncontextmenu(e) {\n        e.preventDefault();\n        const grid = this.grid;\n        const target = getParentElement(e.target, \"THEAD\");\n        const menu = this.menu;\n        const rect = target.getBoundingClientRect();\n        let x = e.clientX - rect.left;\n        const y = e.clientY - rect.top;\n\n        menu.style.top = `${y}px`;\n        menu.style.left = `${x}px`;\n\n        removeAttribute(menu, \"hidden\");\n        if (x + 150 > rect.width) {\n            x -= menu.offsetWidth;\n            menu.style.left = `${x}px`;\n        }\n\n        const documentClickHandler = (e) => {\n            if (!menu.contains(e.target)) {\n                setAttribute(menu, \"hidden\", \"\");\n                off(document, \"click\", documentClickHandler);\n            }\n        };\n        on(document, \"click\", documentClickHandler);\n    }\n    createMenu() {\n        const grid = this.grid;\n        const menu = this.menu;\n        while (menu.lastChild) {\n            menu.removeChild(menu.lastChild);\n        }\n        menu.addEventListener(\"change\", this);\n\n        for (const col of grid.options.columns) {\n            if (col.attr) {\n                continue;\n            }\n            const li = document.createElement(\"li\");\n            const label = document.createElement(\"label\");\n            const checkbox = document.createElement(\"input\");\n            setAttribute(checkbox, \"type\", \"checkbox\");\n            setAttribute(checkbox, \"data-name\", col.field);\n            if (!col.hidden) {\n                checkbox.checked = true;\n            }\n            const text = document.createTextNode(col.title);\n\n            label.appendChild(checkbox);\n            label.appendChild(text);\n\n            li.appendChild(label);\n            menu.appendChild(li);\n        }\n    }\n}\n\nexport default ContextMenu;\n", "import BasePlugin from \"../core/base-plugin.js\";\nimport getParentElement from \"../utils/getParentElement.js\";\nimport { dispatch, findAll, getAttribute, on, setAttribute } from \"../utils/shortcuts.js\";\n\n/**\n * Allows to move headers\n */\nclass DraggableHeaders extends BasePlugin {\n    /**\n     * @param {HTMLTableCellElement} th\n     */\n    makeHeaderDraggable(th) {\n        const grid = this.grid;\n        th.draggable = true;\n        on(th, \"dragstart\", (e) => {\n            if (grid.plugins.ColumnResizer?.isResizing && e.preventDefault) {\n                e.preventDefault();\n                return;\n            }\n            grid.log(\"reorder col\");\n            e.dataTransfer.effectAllowed = \"move\";\n            e.dataTransfer.setData(\"text/plain\", e.target.getAttribute(\"aria-colindex\"));\n        });\n        on(th, \"dragover\", (e) => {\n            if (e.preventDefault) {\n                e.preventDefault();\n            }\n            e.dataTransfer.dropEffect = \"move\";\n            return false;\n        });\n        on(th, \"drop\", (e) => {\n            if (e.stopPropagation) {\n                e.stopPropagation();\n            }\n            const t = e.target;\n            const target = getParentElement(t, \"TH\");\n            const index = Number.parseInt(e.dataTransfer.getData(\"text/plain\"));\n            const targetIndex = Number.parseInt(target.getAttribute(\"aria-colindex\"));\n\n            if (index === targetIndex) {\n                grid.log(\"reordered col stayed the same\");\n                return;\n            }\n            grid.log(`reordered col from ${index} to ${targetIndex}`);\n\n            const offset = grid.startColIndex();\n            const tmp = grid.options.columns[index - offset];\n            grid.options.columns[index - offset] = grid.options.columns[targetIndex - offset];\n            grid.options.columns[targetIndex - offset] = tmp;\n\n            const swapNodes = (selector, el1) => {\n                const rowIndex = el1.parentNode.getAttribute(\"aria-rowindex\");\n                const el2 = grid.querySelector(\n                    `${selector} tr[aria-rowindex=\"${rowIndex}\"] [aria-colindex=\"${targetIndex}\"]`,\n                );\n                setAttribute(el1, \"aria-colindex\", targetIndex);\n                setAttribute(el2, \"aria-colindex\", index);\n                const newNode = document.createElement(\"th\");\n                el1.parentNode.insertBefore(newNode, el1);\n                el2.parentNode.replaceChild(el1, el2);\n                newNode.parentNode.replaceChild(el2, newNode);\n            };\n\n            // Swap all rows in header and body\n            for (const el1 of findAll(grid, `thead th[aria-colindex=\"${index}\"]`)) {\n                swapNodes(\"thead\", el1);\n            }\n            for (const el1 of findAll(grid, `tbody td[aria-colindex=\"${index}\"]`)) {\n                swapNodes(\"tbody\", el1);\n            }\n\n            // Updates the columns\n            grid.options.columns = findAll(grid, \"thead tr.dg-head-columns th[field]\").map((th) =>\n                grid.options.columns.find((c) => c.field === getAttribute(th, \"field\")),\n            );\n\n            dispatch(grid, \"columnReordered\", {\n                col: tmp.field,\n                from: index,\n                to: targetIndex,\n            });\n            return false;\n        });\n    }\n}\n\nexport default DraggableHeaders;\n", "import BasePlugin from \"../core/base-plugin.js\";\n\n/**\n * Allows to paginate with horizontal swipe motions\n */\nclass TouchSupport extends BasePlugin {\n    constructor(grid) {\n        super(grid);\n        this.touch = null;\n    }\n    connected() {\n        const grid = this.grid;\n        grid.addEventListener(\"touchstart\", this, { passive: true });\n        grid.addEventListener(\"touchmove\", this, { passive: true });\n    }\n\n    disconnected() {\n        const grid = this.grid;\n        grid.removeEventListener(\"touchstart\", this);\n        grid.removeEventListener(\"touchmove\", this);\n    }\n\n    ontouchstart(e) {\n        this.touch = e.touches[0];\n    }\n\n    ontouchmove(e) {\n        if (!this.touch) {\n            return;\n        }\n        const grid = this.grid;\n        const xDiff = this.touch.clientX - e.touches[0].clientX;\n        const yDiff = this.touch.clientY - e.touches[0].clientY;\n\n        if (Math.abs(xDiff) > Math.abs(yDiff)) {\n            if (xDiff > 0) {\n                grid.getNext();\n            } else {\n                grid.getPrev();\n            }\n        }\n        this.touch = null;\n    }\n}\n\nexport default TouchSupport;\n", "import BasePlugin from \"../core/base-plugin.js\";\nimport { dispatch, findAll, hasClass, setAttribute } from \"../utils/shortcuts.js\";\n\nconst SELECTABLE_CLASS = \"dg-selectable\";\nconst SELECT_ALL_CLASS = \"dg-select-all\";\nconst CHECKBOX_CLASS = \"form-check-input\"; //bs5\n\n/**\n * Allows to select rows\n */\nclass SelectableRows extends BasePlugin {\n    disconnected() {\n        if (this.selectAll) {\n            this.selectAll.removeEventListener(\"change\", this);\n        }\n    }\n\n    /**\n     * @param {String} key Return a specific key (eg: id) instead of the whole row\n     * @returns {Array}\n     */\n    getSelection(key = null) {\n        const grid = this.grid;\n        const selectedData = [];\n\n        const inputs = findAll(grid, `tbody .${SELECTABLE_CLASS} input:checked`);\n\n        for (const checkbox of inputs) {\n            const idx = Number.parseInt(checkbox.dataset.id);\n            const item = grid.data[idx - 1];\n            if (!item) {\n                console.warn(`Item ${idx} not found`);\n            }\n            if (key) {\n                selectedData.push(item[key]);\n            } else {\n                selectedData.push(item);\n            }\n        }\n        return selectedData;\n    }\n\n    /**\n     * Uncheck box if hidden and visible only\n     * @param {HTMLTableSectionElement} tbody\n     */\n    clearCheckboxes(tbody) {\n        const grid = this.grid;\n        if (!grid.options.selectVisibleOnly) {\n            return;\n        }\n        const inputs = findAll(tbody, `tr[hidden] .${SELECTABLE_CLASS} input`);\n        for (const input of inputs) {\n            input.checked = false;\n        }\n        this.selectAll.checked = false;\n    }\n\n    colIndex() {\n        return this.grid.startColIndex() - 2;\n    }\n\n    /**\n     * @param {HTMLTableRowElement} tr\n     */\n    createHeaderCol(tr) {\n        const th = document.createElement(\"th\");\n        setAttribute(th, \"scope\", \"col\");\n        setAttribute(th, \"role\", \"columnheader button\");\n        setAttribute(th, \"aria-colindex\", this.colIndex());\n        th.classList.add(...[SELECTABLE_CLASS, \"dg-not-resizable\", \"dg-not-sortable\"]);\n        th.tabIndex = 0;\n\n        this.selectAll = document.createElement(\"input\");\n        this.selectAll.type = \"checkbox\";\n        this.selectAll.classList.add(SELECT_ALL_CLASS);\n        this.selectAll.classList.add(CHECKBOX_CLASS);\n        this.selectAll.addEventListener(\"change\", this);\n\n        const label = document.createElement(\"label\");\n        label.appendChild(this.selectAll);\n\n        th.appendChild(label);\n\n        th.setAttribute(\"width\", \"40\");\n        tr.appendChild(th);\n    }\n\n    /**\n     * @param {HTMLTableRowElement} tr\n     */\n    createFilterCol(tr) {\n        const th = document.createElement(\"th\");\n        setAttribute(th, \"role\", \"columnheader button\");\n        setAttribute(th, \"aria-colindex\", this.colIndex());\n        th.classList.add(SELECTABLE_CLASS);\n        th.tabIndex = 0;\n\n        tr.appendChild(th);\n    }\n\n    /**\n     * Handles the selectAll checkbox when any other .dg-selectable checkbox is checked on table body.\n     * It should check selectAll if all is checked\n     * It should uncheck selectAll if any is unchecked\n     * @param {HTMLTableSectionElement} tbody\n     */\n    shouldSelectAll(tbody) {\n        if (!this.selectAll) {\n            return;\n        }\n        // Delegate listener for change events on input checkboxes\n        tbody.addEventListener(\"change\", this);\n        // Make sure state is up to date\n        tbody.dispatchEvent(new Event(\"change\"));\n    }\n\n    /**\n     * @param {HTMLTableRowElement} tr\n     */\n    createDataCol(tr) {\n        // Create col\n        const td = document.createElement(\"td\");\n        setAttribute(td, \"role\", \"gridcell button\");\n        setAttribute(td, \"aria-colindex\", this.colIndex());\n        td.classList.add(SELECTABLE_CLASS);\n\n        // Create input\n        const selectOne = document.createElement(\"input\");\n        // Alias row id for easy retrieval in getSelection\n        selectOne.dataset.id = tr.getAttribute(\"aria-rowindex\");\n        selectOne.type = \"checkbox\";\n        selectOne.classList.add(CHECKBOX_CLASS);\n        // Label need to take full space thanks to css to make the whole cell clickable\n        const label = document.createElement(\"label\");\n        label.classList.add(\"dg-clickable-cell\");\n        label.appendChild(selectOne);\n        td.appendChild(label);\n\n        // Prevent unwanted click behaviour on row\n        label.addEventListener(\"click\", this);\n\n        tr.appendChild(td);\n    }\n\n    /**\n     * @param {Event} e\n     */\n    onclick(e) {\n        e.stopPropagation();\n    }\n\n    /**\n     * Handle change event on select all or any select checkbox in the table body\n     * @param {import(\"../utils/shortcuts.js\").FlexibleEvent} e\n     */\n    onchange(e) {\n        const grid = this.grid;\n        if (hasClass(e.target, SELECT_ALL_CLASS)) {\n            const visibleOnly = grid.options.selectVisibleOnly;\n            const inputs = findAll(grid, `tbody .${SELECTABLE_CLASS} input`);\n            for (const cb of inputs) {\n                if (visibleOnly && !cb.offsetWidth) {\n                    return;\n                }\n                cb.checked = this.selectAll.checked;\n            }\n            dispatch(grid, \"rowsSelected\", {\n                selection: this.getSelection(),\n            });\n        } else {\n            if (!e.target.closest(`.${SELECTABLE_CLASS}`)) {\n                return;\n            }\n            const totalCheckboxes = findAll(grid, `tbody .${SELECTABLE_CLASS} input[type=checkbox]`);\n            // @ts-ignore\n            const totalChecked = totalCheckboxes.filter((n) => n.checked);\n            this.selectAll.checked = totalChecked.length === totalCheckboxes.length;\n\n            dispatch(grid, \"rowsSelected\", {\n                selection: grid.getSelection(),\n            });\n        }\n    }\n}\n\nexport default SelectableRows;\n", "import BasePlugin from \"../core/base-plugin.js\";\nimport { setAttribute } from \"../utils/shortcuts.js\";\n\n/**\n * Support for fixed table height\n *\n * We should add a fake row to push the footer down in case we don't have enough rows\n */\nclass FixedHeight extends BasePlugin {\n    constructor(grid) {\n        super(grid);\n\n        this.hasFixedHeight = false;\n        // If we have a fixed height, make sure we have overflowY set\n        if (grid.style.height) {\n            grid.style.overflowY = \"auto\";\n            this.hasFixedHeight = true;\n        }\n    }\n\n    /**\n     */\n    createFakeRow() {\n        const grid = this.grid;\n        const tbody = grid.querySelector(\"tbody\");\n        const tr = document.createElement(\"tr\");\n        setAttribute(tr, \"role\", \"row\");\n        setAttribute(tr, \"hidden\", \"\");\n        tr.classList.add(\"dg-fake-row\");\n        tr.tabIndex = 0;\n        tbody.appendChild(tr);\n    }\n\n    get fakeRow() {\n        return this.grid.querySelector(\".dg-fake-row\");\n    }\n\n    /**\n     * On last page, use a fake row to push footer down\n     */\n    updateFakeRow() {\n        const grid = this.grid;\n        const fakeRow = this.fakeRow;\n        if (!fakeRow) {\n            return;\n        }\n\n        // We don't need a fake row if we display everything\n        if (grid.options.perPage > grid.totalRecords()) {\n            return;\n        }\n        // We are not on last page\n        if (grid.page !== grid.totalPages()) {\n            return;\n        }\n        if (!grid.options.autoheight) {\n            return;\n        }\n        // Find remaining missing height\n        const max = grid.options.perPage * grid.rowHeight;\n        const visibleRows = grid.querySelectorAll(\"tbody tr:not([hidden])\").length;\n        const fakeHeight = visibleRows > 1 ? max - visibleRows * grid.rowHeight : max;\n        if (fakeHeight > 0) {\n            setAttribute(fakeRow, \"height\", fakeHeight);\n            fakeRow.removeAttribute(\"hidden\");\n        } else {\n            fakeRow.removeAttribute(\"height\");\n        }\n    }\n}\n\nexport default FixedHeight;\n", "import BasePlugin from \"../core/base-plugin.js\";\nimport getTextWidth from \"../utils/getTextWidth.js\";\nimport { getAttribute, hasAttribute, setAttribute } from \"../utils/shortcuts.js\";\n\n/**\n * Allows to resize columns\n */\nclass AutosizeColumn extends BasePlugin {\n    /**\n     * Autosize col based on column data\n     * @param {HTMLTableCellElement} th\n     * @param {import(\"../data-grid\").Column} column\n     * @param {Number} min\n     * @param {Number} max\n     * @returns {Number}\n     */\n    computeSize(th, column, min, max) {\n        const grid = this.grid;\n        if (hasAttribute(th, \"width\")) {\n            return getAttribute(th, \"width\");\n        }\n        if (!grid.data.length) {\n            return;\n        }\n        const firstVal = grid.data[0];\n        const lastVal = grid.data[grid.data.length - 1];\n        let v = firstVal[column.field] ? firstVal[column.field].toString() : \"\";\n        const v2 = lastVal[column.field] ? lastVal[column.field].toString() : \"\";\n        if (v2.length > v.length) {\n            v = v2;\n        }\n        let width = 0;\n        if (v.length <= 6) {\n            width = min;\n        } else if (v.length > 50) {\n            width = max;\n        } else {\n            // Add some extra room to have some spare space\n            width = getTextWidth(`${v}0000`, th);\n        }\n        if (width > max) {\n            width = max;\n        }\n        if (width < min) {\n            width = min;\n        }\n        setAttribute(th, \"width\", width);\n        return width;\n    }\n}\n\nexport default AutosizeColumn;\n", "import BasePlugin from \"../core/base-plugin.js\";\nimport debounce from \"../utils/debounce.js\";\nimport {\n    addClass,\n    ce,\n    find,\n    findAll,\n    hasClass,\n    insertAfter,\n    removeAttribute,\n    removeClass,\n    setAttribute,\n} from \"../utils/shortcuts.js\";\n\nconst RESPONSIVE_CLASS = \"dg-responsive\";\n\nlet obsTo;\n\n/**\n * @param {Array<HTMLElement>} list\n * @returns {Array<HTMLElement>}\n */\nfunction sortByPriority(list) {\n    return list.sort((a, b) => {\n        const v1 = Number.parseInt(a.dataset.responsive) || 1;\n        const v2 = Number.parseInt(b.dataset.responsive) || 1;\n        return v2 - v1;\n    });\n}\n\n/**\n * @type {ResizeObserverCallback}\n */\n//@ts-ignore\nconst callback = debounce((entries) => {\n    for (const entry of entries) {\n        /**\n         * @type {import(\"../data-grid\").default}\n         */\n        // @ts-ignore\n        const grid = entry.target;\n        const table = grid.table;\n        if (grid.plugins.ResponsiveGrid.observerBlocked) {\n            return;\n        }\n        // check inlineSize (width) and not blockSize (height)\n        const contentBoxSize = Array.isArray(entry.contentBoxSize) ? entry.contentBoxSize[0] : entry.contentBoxSize;\n        const size = Number.parseInt(contentBoxSize.inlineSize);\n        const tableWidth = table.offsetWidth;\n        const realTableWidth = findAll(grid.headerRow, \"th\").reduce((result, th) => {\n            return result + th.offsetWidth;\n        }, 0);\n        const diff = (realTableWidth || tableWidth) - size - 1;\n        const minWidth = 50;\n        const prevAction = grid.plugins.ResponsiveGrid.prevAction;\n        // We have an array with the columns to show/hide are in order, most important first\n        const headerCols = sortByPriority(\n            findAll(grid.headerRow, \"th[field]\")\n                .reverse() // Order takes precedence if no priority is set\n                .filter((col) => {\n                    // Leave out unresponsive columns\n                    return col.dataset.responsive !== \"0\";\n                }),\n        );\n        let changed = false;\n\n        grid.log(`table is ${tableWidth}/${realTableWidth} and available size is ${size}. Diff: ${diff}`);\n\n        // The table is too big when diff has a high value, otherwise it will be like -1 or -2\n        if (diff > 0) {\n            if (prevAction === \"show\") {\n                return;\n            }\n            grid.plugins.ResponsiveGrid.prevAction = \"hide\";\n            let remaining = diff;\n            let cols = headerCols.filter((col) => {\n                return !col.hasAttribute(\"hidden\") && col.hasAttribute(\"data-responsive\");\n            });\n            if (cols.length === 0) {\n                cols = headerCols.filter((col) => {\n                    return !col.hasAttribute(\"hidden\");\n                });\n                // Always keep one column\n                if (cols.length === 1) {\n                    return;\n                }\n            }\n\n            for (const col of cols) {\n                if (remaining < 0) {\n                    continue;\n                }\n\n                const colWidth = col.offsetWidth;\n                const field = col.getAttribute(\"field\");\n                if (!field) {\n                    continue;\n                }\n                col.dataset.baseWidth = `${col.offsetWidth}`;\n\n                grid.hideColumn(field, false);\n                grid.setColProp(field, \"responsiveHidden\", true);\n                changed = true;\n\n                remaining -= colWidth;\n                remaining = Math.round(remaining);\n            }\n        } else {\n            if (prevAction === \"hide\") {\n                return;\n            }\n            grid.plugins.ResponsiveGrid.prevAction = \"show\";\n\n            const requiredWidth =\n                headerCols\n                    .filter((col) => {\n                        return !col.hasAttribute(\"hidden\");\n                    })\n                    .reduce((result, col) => {\n                        const width = col.dataset.minWidth ? Number.parseInt(col.dataset.minWidth) : col.offsetWidth;\n                        return result + width;\n                    }, 0) + minWidth; // Add an offset so that inserting column is smoother\n\n            // Compute available width to insert columns\n            let remaining = size - requiredWidth;\n            // Do we have any hidden column that we can restore ?\n            const filteredHeaderCols = headerCols\n                .slice()\n                .reverse() // Reverse the array to restore the columns in the proper order\n                .filter((col) => {\n                    return col.hasAttribute(\"hidden\");\n                });\n\n            for (const col of filteredHeaderCols) {\n                if (remaining < minWidth) {\n                    continue;\n                }\n                const colWidth = Number.parseInt(col.dataset.minWidth);\n\n                // We need to have enough space to restore it\n                if (colWidth > remaining) {\n                    remaining = -1; // break loop to keep restoring in order\n                    continue;\n                }\n\n                const field = col.getAttribute(\"field\");\n                if (!field) {\n                    continue;\n                }\n\n                grid.showColumn(field, false);\n                grid.setColProp(field, \"responsiveHidden\", false);\n                changed = true;\n\n                remaining -= colWidth;\n                remaining = Math.round(remaining);\n            }\n        }\n\n        // Check footer\n        const footer = find(grid.table, \"tfoot\");\n        const realFooterWidth = findAll(grid.table, \".dg-footer > div\").reduce((result, div) => {\n            return result + div.offsetWidth;\n        }, 0);\n        const availableFooterWidth = footer.offsetWidth - realFooterWidth;\n        if (realFooterWidth > size) {\n            addClass(footer, \"dg-footer-compact\");\n        } else if (availableFooterWidth > 250) {\n            removeClass(footer, \"dg-footer-compact\");\n        }\n        if (changed) {\n            grid.renderTable();\n        }\n        // Prevent resize loop\n        setTimeout(() => {\n            grid.plugins.ResponsiveGrid.prevAction = null;\n        }, 1000);\n        grid.table.style.visibility = \"visible\";\n    }\n}, 100);\nconst resizeObserver = new ResizeObserver(callback);\n\n/**\n * Responsive data grid\n */\nclass ResponsiveGrid extends BasePlugin {\n    constructor(grid) {\n        super(grid);\n\n        this.observerBlocked = false;\n        this.prevAction = null;\n    }\n\n    connected() {\n        if (this.grid.options.responsive) {\n            this.observe();\n        }\n    }\n\n    disconnected() {\n        this.unobserve();\n    }\n\n    observe() {\n        if (!this.grid.options.responsive) {\n            return;\n        }\n        resizeObserver.observe(this.grid);\n        this.grid.style.display = \"block\"; // Otherwise resize doesn't happen\n        this.grid.style.overflowX = \"hidden\"; // Prevent scrollbars from appearing\n    }\n\n    unobserve() {\n        resizeObserver.unobserve(this.grid);\n        this.grid.style.display = \"unset\";\n        this.grid.style.overflowX = \"unset\";\n    }\n\n    blockObserver() {\n        this.observerBlocked = true;\n        if (obsTo) {\n            clearTimeout(obsTo);\n        }\n    }\n\n    unblockObserver() {\n        obsTo = setTimeout(() => {\n            this.observerBlocked = false;\n        }, 200); // more than debounce\n    }\n\n    /**\n     * @returns {Boolean}\n     */\n    hasHiddenColumns() {\n        let flag = false;\n\n        for (const col of this.grid.options.columns) {\n            if (col.responsiveHidden) {\n                flag = true;\n            }\n        }\n        return flag;\n    }\n\n    colIndex() {\n        return this.grid.startColIndex() - 1;\n    }\n\n    /**\n     * @param {HTMLTableRowElement} tr\n     */\n    createHeaderCol(tr) {\n        if (!this.grid.options.responsiveToggle) {\n            return;\n        }\n        const th = ce(\"th\", tr);\n        setAttribute(th, \"scope\", \"col\");\n        setAttribute(th, \"role\", \"columnheader button\");\n        setAttribute(th, \"aria-colindex\", this.colIndex());\n        setAttribute(th, \"width\", \"40\");\n        th.classList.add(...[`${RESPONSIVE_CLASS}-toggle`, \"dg-not-resizable\", \"dg-not-sortable\"]);\n        th.tabIndex = 0;\n    }\n\n    /**\n     * @param {HTMLTableRowElement} tr\n     */\n    createFilterCol(tr) {\n        if (!this.grid.options.responsiveToggle) {\n            return;\n        }\n        const th = ce(\"th\", tr);\n        setAttribute(th, \"role\", \"columnheader button\");\n        setAttribute(th, \"aria-colindex\", this.colIndex());\n        th.classList.add(`${RESPONSIVE_CLASS}-toggle`);\n        th.tabIndex = 0;\n    }\n\n    /**\n     * @param {HTMLTableRowElement} tr\n     */\n    createDataCol(tr) {\n        if (!this.grid.options.responsiveToggle) {\n            return;\n        }\n        // Create col\n        const td = document.createElement(\"td\");\n        setAttribute(td, \"role\", \"gridcell button\");\n        setAttribute(td, \"aria-colindex\", this.colIndex());\n        td.classList.add(`${RESPONSIVE_CLASS}-toggle`);\n\n        // Create icon\n        td.innerHTML = `<div class='dg-clickable-cell'><svg class='${RESPONSIVE_CLASS}-open' viewbox=\"0 0 24 24\" height=\"24\" width=\"24\">\n  <line x1=\"7\" y1=\"12\" x2=\"17\" y2=\"12\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" />\n  <line y1=\"7\" x1=\"12\" y2=\"17\" x2=\"12\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" />\n</svg>\n<svg class='${RESPONSIVE_CLASS}-close' viewbox=\"0 0 24 24\" height=\"24\" width=\"24\" style=\"display:none\">\n  <line x1=\"7\" y1=\"12\" x2=\"17\" y2=\"12\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" />\n</svg></div>`;\n        tr.appendChild(td);\n\n        td.addEventListener(\"click\", this);\n        td.addEventListener(\"mousedown\", this);\n    }\n\n    computeLabelWidth() {\n        let idealWidth = 0;\n        let consideredCol = 0;\n        while (idealWidth < 120) {\n            consideredCol++;\n            const hCol = find(this.grid, `.dg-head-columns th[aria-colindex=\"${consideredCol}\"]`);\n            if (hCol) {\n                idealWidth += hCol.offsetWidth;\n            } else {\n                break;\n            }\n        }\n        return idealWidth;\n    }\n\n    /**\n     * @param {Event} ev\n     */\n    onmousedown(ev) {\n        // Avoid selection through double click\n        ev.preventDefault();\n    }\n\n    /**\n     * @param {Event} ev\n     */\n    onclick(ev) {\n        // Prevent expandable\n        ev.stopPropagation();\n\n        // target is the element that triggered the event (e.g., the user clicked on)\n        // currentTarget is the element that the event listener is attached to.\n\n        /**\n         * @type {HTMLTableRowElement}\n         */\n        //@ts-ignore\n        const td = ev.currentTarget;\n        const tr = td.parentElement;\n        const open = find(td, `.${RESPONSIVE_CLASS}-open`);\n        const close = find(td, `.${RESPONSIVE_CLASS}-close`);\n\n        this.blockObserver();\n\n        const isExpanded = hasClass(tr, `${RESPONSIVE_CLASS}-expanded`);\n        if (isExpanded) {\n            removeClass(tr, `${RESPONSIVE_CLASS}-expanded`);\n            open.style.display = \"unset\";\n            close.style.display = \"none\";\n\n            // Move back rows and cleanup row\n            const childRow = tr.nextElementSibling;\n            const hiddenCols = findAll(childRow, `.${RESPONSIVE_CLASS}-hidden`);\n\n            for (const col of hiddenCols) {\n                // We don't really need to care where we insert them since we are going to redraw anyway\n                tr.appendChild(col);\n                setAttribute(col, \"hidden\");\n            }\n\n            childRow.parentElement.removeChild(childRow);\n        } else {\n            addClass(tr, `${RESPONSIVE_CLASS}-expanded`);\n            open.style.display = \"none\";\n            close.style.display = \"unset\";\n\n            // Create a child row and move rows into it\n            const childRow = ce(\"tr\");\n            insertAfter(childRow, tr);\n            addClass(childRow, `${RESPONSIVE_CLASS}-child-row`);\n\n            const childRowTd = ce(\"td\", childRow);\n            setAttribute(childRowTd, \"colspan\", this.grid.columnsLength(true));\n\n            const childTable = ce(\"table\", childRowTd);\n            addClass(childTable, `${RESPONSIVE_CLASS}-table`);\n\n            const hiddenCols = findAll(tr, `.${RESPONSIVE_CLASS}-hidden`);\n            const idealWidth = this.computeLabelWidth();\n\n            for (const col of hiddenCols) {\n                const childTableRow = ce(\"tr\", childTable);\n\n                // Add label\n                const label = col.dataset.name;\n                const labelCol = ce(\"th\", childTableRow);\n                // It looks much better when aligned with an actual col\n                labelCol.style.width = `${idealWidth}px`;\n                labelCol.innerHTML = label;\n\n                // Add actual row\n                childTableRow.appendChild(col);\n                removeAttribute(col, \"hidden\");\n            }\n        }\n\n        this.unblockObserver();\n    }\n}\n\nexport default ResponsiveGrid;\n", "import BasePlugin from \"../core/base-plugin.js\";\nimport interpolate from \"../utils/interpolate.js\";\nimport { dispatch, on, setAttribute } from \"../utils/shortcuts.js\";\n\n/**\n * Add action on rows\n */\nclass RowActions extends BasePlugin {\n    /**\n     * @returns {Boolean}\n     */\n    hasActions() {\n        return this.grid.options.actions.length > 0;\n    }\n\n    /**\n     *\n     * @param {HTMLTableRowElement} tr\n     */\n    makeActionHeader(tr) {\n        const actionsTh = document.createElement(\"th\");\n        setAttribute(actionsTh, \"role\", \"columnheader button\");\n        setAttribute(actionsTh, \"aria-colindex\", this.grid.columnsLength(true));\n        actionsTh.classList.add(...[\"dg-actions\", \"dg-not-sortable\", \"dg-not-resizable\", this.actionClass]);\n        actionsTh.tabIndex = 0;\n        tr.appendChild(actionsTh);\n    }\n\n    /**\n     *\n     * @param {HTMLTableRowElement} tr\n     */\n    makeActionFilter(tr) {\n        const actionsTh = document.createElement(\"th\");\n        actionsTh.setAttribute(\"role\", \"columnheader button\");\n        setAttribute(actionsTh, \"aria-colindex\", this.grid.columnsLength(true));\n        actionsTh.classList.add(...[\"dg-actions\", this.actionClass]);\n        actionsTh.tabIndex = 0;\n        tr.appendChild(actionsTh);\n    }\n\n    /**\n     * @param {HTMLTableRowElement} tr\n     * @param {Object} item\n     */\n    makeActionRow(tr, item) {\n        const labels = this.grid.labels;\n        const td = document.createElement(\"td\");\n        setAttribute(td, \"role\", \"gridcell\");\n        setAttribute(td, \"aria-colindex\", this.grid.columnsLength(true));\n        td.classList.add(...[\"dg-actions\", this.actionClass]);\n        td.tabIndex = 0;\n\n        // Add menu toggle\n        const actionsToggle = document.createElement(\"button\");\n        actionsToggle.classList.add(\"dg-actions-toggle\");\n        actionsToggle.innerHTML = \"\u2630\";\n        td.appendChild(actionsToggle);\n        on(actionsToggle, \"click\", (ev) => {\n            ev.stopPropagation();\n            ev.target.parentElement.classList.toggle(\"dg-actions-expand\");\n        });\n\n        for (const action of this.grid.options.actions) {\n            const button = document.createElement(\"button\");\n            if (action.html) {\n                button.innerHTML = action.html;\n            } else {\n                button.innerText = action.title ?? action.name;\n            }\n            if (action.title) {\n                button.title = action.title;\n            }\n            if (action.url) {\n                button.type = \"submit\";\n                button.formAction = interpolate(action.url, item);\n            }\n            if (action.class) {\n                button.classList.add(...action.class.split(\" \"));\n            }\n            const actionHandler = (ev) => {\n                ev.stopPropagation();\n                if (action.confirm) {\n                    const c = confirm(labels.areYouSure);\n                    if (!c) {\n                        ev.preventDefault();\n                        return;\n                    }\n                }\n                dispatch(this.grid, \"action\", {\n                    data: item,\n                    action: action.name,\n                });\n            };\n            button.addEventListener(\"click\", actionHandler);\n            td.appendChild(button);\n\n            // Row action\n            if (action.default) {\n                tr.classList.add(\"dg-actionable\");\n                tr.addEventListener(\"click\", actionHandler);\n            }\n        }\n\n        tr.appendChild(td);\n    }\n\n    get actionClass() {\n        if (this.grid.options.actions.length < 3 && !this.grid.options.collapseActions) {\n            return `dg-actions-${this.grid.options.actions.length}`;\n        }\n        return \"dg-actions-more\";\n    }\n}\n\nexport default RowActions;\n", "import BasePlugin from \"../core/base-plugin.js\";\nimport { dispatch } from \"../utils/shortcuts.js\";\n\n/**\n * Make editable inputs in rows\n */\nclass EditableColumn extends BasePlugin {\n    /**\n     *\n     * @param {HTMLTableCellElement} td\n     * @param {import(\"../data-grid\").Column} column\n     * @param {Object} item\n     * @param {number} i\n     */\n    makeEditableInput(td, column, item, i) {\n        const gridId = this.grid.getAttribute(\"id\");\n        const input = document.createElement(\"input\");\n        input.type = column.editableType || \"text\";\n        if (input.type === \"email\") {\n            input.inputMode = \"email\";\n        }\n        if (input.type === \"decimal\") {\n            input.type = \"text\";\n            input.inputMode = \"decimal\";\n        }\n        input.autocomplete = \"off\";\n        input.spellcheck = false;\n        input.tabIndex = 0;\n        input.classList.add(\"dg-editable\");\n        input.name = `${gridId.replace(\"-\", \"_\")}[${i + 1}][${column.field}]`;\n        input.value = item[column.field];\n        input.dataset.field = column.field;\n\n        // Prevent row action\n        input.addEventListener(\"click\", (ev) => ev.stopPropagation());\n        // Enter validates edit\n        input.addEventListener(\"keypress\", (ev) => {\n            if (ev.type === \"keypress\") {\n                const key = ev.keyCode || ev.key;\n                if (key === 13 || key === \"Enter\") {\n                    input.blur();\n                    ev.preventDefault();\n                }\n            }\n        });\n        // Save on blur\n        input.addEventListener(\"blur\", () => {\n            // Only fire on update\n            if (input.value === item[input.dataset.field]) {\n                return;\n            }\n            // Update underlying data\n            item[input.dataset.field] = input.value;\n            // Notify\n            dispatch(this.grid, \"edit\", {\n                data: item,\n                value: input.value,\n            });\n        });\n        td.appendChild(input);\n    }\n}\n\nexport default EditableColumn;\n", "import BasePlugin from \"../core/base-plugin.js\";\r\nimport { $ } from \"../utils/shortcuts.js\";\r\n\r\n/**\r\n * Adds an element for showing a spinning icon on grid loading.\r\n */\r\nclass SpinnerSupport extends BasePlugin {\r\n    connected() {\r\n        // Inserts spinner\r\n        if (this.grid.options.spinnerClass && this.grid.plugins.SpinnerSupport) {\r\n            this.add();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds a spinner element with its associated css styles.\r\n     */\r\n    add() {\r\n        const grid = this.grid;\r\n        const classes = grid.options.spinnerClass;\r\n        if (!classes) {\r\n            return;\r\n        }\r\n        const cls = classes\r\n            .split(\" \")\r\n            .map((e) => `.${e}`)\r\n            .join(\"\");\r\n\r\n        const template = `\r\n<style id=\"dg-styles\">\r\n  data-grid ${cls} { position: absolute; top: 37%; left: 47%; z-index: 999; }\r\n  data-grid:not(.dg-loading) ${cls} { display: none; }\r\n  data-grid:not(.dg-initialized).dg-loading ${cls} { top: 0; }\r\n  @media only screen and (max-width: 767px) {\r\n    data-grid[responsive] ${cls} { top: 8rem; left: 42%; }\r\n  }\r\n</style>\r\n`;\r\n        if (!$(\"#dg-styles\")) {\r\n            const styleParent = $(\"head\") ?? $(\"body\");\r\n            const position = /head/i.test(styleParent.tagName) ? \"beforeend\" : \"afterbegin\";\r\n            styleParent.insertAdjacentHTML(position, template);\r\n        }\r\n        !$(`i${cls}`, grid) && grid.insertAdjacentHTML(\"afterbegin\", `<i class=\"${classes}\"></i>`);\r\n    }\r\n}\r\n\r\nexport default SpinnerSupport;\r\n", "\uFEFFimport BasePlugin from \"../core/base-plugin.js\";\nimport { findAll } from \"../utils/shortcuts.js\";\n\n/**\n * @typedef GridState\n * @property {Object} meta\n * @property {Number} pages\n * @property {Number} page\n * @property {Number} perPage\n * @property {Object} filters\n * @property {Array} columns\n * @property {String} sort\n * @property {String} sortDir\n * @property {Number} scrollTo\n */\n\nclass SaveState extends BasePlugin {\n    constructor(grid) {\n        super(grid);\n        this.cachedState = null;\n        this.isFilterSortSet = false;\n        this.isDataLoaded = false;\n        this.isScrolled = false;\n        this.log(\"Init\");\n    }\n\n    connected() {\n        this.log(\"connected\");\n        const grid = this.grid;\n\n        if (!grid.options.saveState) {\n            this.log(\"disabled\");\n            return;\n        }\n\n        this.log(\"enabled\");\n\n        const cachedState = this._getState();\n        if (cachedState) {\n            this.log(\"hide columns\");\n\n            for (const col of cachedState.columns) {\n                if (col.hidden) {\n                    const hideCol = grid.options.columns.find((c) => c.field === col.field);\n                    hideCol.hidden = true;\n                }\n            }\n\n            this.log(\"set: meta, pages\");\n            grid.options.perPage = cachedState.perPage;\n            if (grid.options.server) {\n                grid.meta = cachedState.meta;\n                grid.pages = cachedState.pages;\n                grid.page = cachedState.page;\n            }\n        }\n\n        this.cachedState = cachedState;\n\n        const dgLoadData = grid.loadData;\n        grid.loadData = function (...args) {\n            return new Promise((resolve, reject) => {\n                dgLoadData.apply(this, args).finally(() => {\n                    const saveState = this.plugins.SaveState;\n\n                    if (!grid.classList.contains(\"dg-initialized\")) {\n                        saveState.log(\"not init, loadData skipped\");\n                        return resolve();\n                    }\n\n                    saveState.log(\"loadData finished, set param controls\");\n\n                    if (saveState.cachedState && !saveState.isFilterSortSet) {\n                        saveState.log(\"set sort and filters\");\n\n                        const sortableHeaders = findAll(grid, \"thead tr.dg-head-columns th[aria-sort]\");\n                        for (const el of sortableHeaders) {\n                            el.setAttribute(\"aria-sort\", \"none\");\n                        }\n\n                        grid.querySelector(\n                            `thead tr.dg-head-columns th[field='${saveState.cachedState.sort}']`,\n                        )?.setAttribute(\"aria-sort\", saveState.cachedState.sortDir);\n\n                        const filters = findAll(grid.filterRow, \"[id^=dg-filter]\");\n                        for (const el of filters) {\n                            el.value = saveState.cachedState.filters[el.dataset.name];\n                        }\n                        saveState.isFilterSortSet = true;\n                    }\n\n                    /** @type {GridState} */\n                    const newState = {\n                        meta: grid.meta,\n                        pages: grid.pages,\n                        page: grid.page,\n                        perPage: grid.options.perPage,\n                        filters: {},\n                        columns: grid.options.columns.map((col) => ({ field: col.field, hidden: col.hidden })),\n                        sort: grid.getSort(),\n                        sortDir: grid.getSortDir(),\n                        scrollTo: window.scrollY,\n                    };\n\n                    const filters = grid.getFilters();\n\n                    for (const key of Object.keys(filters)) {\n                        newState.filters[key] = filters[key];\n                    }\n\n                    saveState.log(\"store new state\");\n                    saveState._setState(newState);\n\n                    if (!grid.options.server && saveState.cachedState && !saveState.isDataLoaded) {\n                        saveState.isDataLoaded = true;\n                        grid.filterData();\n                        grid.page = saveState.cachedState.page;\n                        grid.pageChanged();\n                    }\n\n                    resolve();\n                });\n            });\n        };\n\n        const updateState = () => {\n            const saveState = grid.plugins.SaveState;\n            const state = saveState._getState();\n            if (!state) {\n                return;\n            }\n            state.columns = grid.options.columns.map((col) => ({ field: col.field, hidden: col.hidden }));\n            state.sort = grid.getSort();\n            state.sortDir = grid.getSortDir();\n            state.scrollTo = window.scrollY;\n            saveState._setState(state);\n        };\n\n        document.addEventListener(\"scrollend\", updateState);\n        grid.addEventListener(\"headerRendered\", updateState);\n\n        grid.addEventListener(\"bodyRendered\", (ev) => {\n            if (!grid.classList.contains(\"dg-initialized\") || grid.classList.contains(\"dg-loading\")) {\n                return;\n            }\n\n            if (!grid.options.server) {\n                updateState();\n            }\n\n            const saveState = grid.plugins.SaveState;\n            if (!saveState.cachedState || !saveState.isFilterSortSet) {\n                return;\n            }\n\n            if (!saveState.isDataLoaded) {\n                saveState.isDataLoaded = true;\n                grid.reload();\n            } else if (!saveState.isScrolled) {\n                saveState.isScrolled = true;\n                window.scrollTo({ top: saveState.cachedState.scrollTo, left: 0, behavior: \"instant\" });\n            }\n        });\n    }\n\n    log(message) {\n        this.grid.log(`[Save-State] ${message}`);\n    }\n\n    /**\n     * @returns {GridState}\n     */\n    _getState() {\n        let state;\n        try {\n            state = JSON.parse(sessionStorage.getItem(`gridSaveState_${this.grid.id}`));\n        } catch (_) {}\n        return state;\n    }\n\n    /**\n     * @param {GridState} state\n     */\n    _setState(state) {\n        sessionStorage.setItem(`gridSaveState_${this.grid.id}`, JSON.stringify(state));\n    }\n}\n\nexport default SaveState;\n", "/**\r\n * Data Grid custom element\r\n * https://github.com/lekoala/data-grid/\r\n * @license MIT\r\n */\r\n\r\nimport DataGrid from \"./src/data-grid.js\";\r\n// Optional plugins\r\nimport ColumnResizer from \"./src/plugins/column-resizer.js\";\r\nimport ContextMenu from \"./src/plugins/context-menu.js\";\r\nimport DraggableHeaders from \"./src/plugins/draggable-headers.js\";\r\nimport TouchSupport from \"./src/plugins/touch-support.js\";\r\nimport SelectableRows from \"./src/plugins/selectable-rows.js\";\r\nimport FixedHeight from \"./src/plugins/fixed-height.js\";\r\nimport AutosizeColumn from \"./src/plugins/autosize-column.js\";\r\nimport ResponsiveGrid from \"./src/plugins/responsive-grid.js\";\r\nimport RowActions from \"./src/plugins/row-actions.js\";\r\nimport EditableColumn from \"./src/plugins/editable-column.js\";\r\nimport SpinnerSupport from \"./src/plugins/spinner-support.js\";\r\nimport SaveState from \"./src/plugins/save-state.js\";\r\n\r\n// Using shorthand property names\r\n// This make them reserved and keys will be preserved\r\n// Actual class names are renamed\r\nDataGrid.registerPlugins({\r\n  ColumnResizer,\r\n  ContextMenu,\r\n  DraggableHeaders,\r\n  TouchSupport,\r\n  SelectableRows,\r\n  FixedHeight,\r\n  AutosizeColumn,\r\n  ResponsiveGrid,\r\n  RowActions,\r\n  EditableColumn,\r\n  SpinnerSupport,\r\n  SaveState\r\n});\r\n\r\n// Prevent errors if included multiple times\r\nif (!customElements.get(\"data-grid\")) {\r\n  customElements.define(\"data-grid\", DataGrid);\r\n}\r\n\r\nexport default DataGrid;\r\n\r\nconst global = typeof globalThis !== \"undefined\" ? globalThis : self;\r\nglobal.DataGrid = DataGrid;"],
  "mappings": "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",
  "names": ["camelize", "str", "m", "chr", "normalizeData", "v", "val", "supportedPassiveTypes", "passiveOpts", "type", "getAttribute", "el", "name", "hasAttribute", "setAttribute", "v", "check", "removeAttribute", "on", "listener", "off", "dispatch", "el", "name", "data", "bubbles", "opts", "hasClass", "addClass", "removeClass", "toggleClass", "$", "selector", "base", "$$", "find", "findAll", "ce", "tagName", "parent", "el", "insertAfter", "newNode", "existingNode", "BaseElement", "options", "opt", "v", "setAttribute", "jsonConfig", "data", "key", "normalizeData", "message", "getAttribute", "event", "template", "dispatch", "attributeName", "oldValue", "newValue", "isOption", "transformer", "attr", "camelize", "base_element_default", "addSelectOption", "el", "value", "label", "checked", "opt", "appendParamsToUrl", "url", "params", "key", "k", "convertArray", "v", "bv", "elementOffset", "el", "rect", "scrollLeft", "scrollTop", "interpolate", "str", "data", "$1", "$2", "canvas", "getTextWidth", "text", "el", "withPadding", "styles", "fontWeight", "fontSize", "fontFamily", "padding", "paddingLeft", "paddingRight", "context", "metrics", "randstr", "prefix", "debounce", "handler", "timeout", "timer", "args", "plugins", "labels", "applyColumnDefinition", "el", "column", "setAttribute", "addClass", "DataGrid", "_DataGrid", "base_element_default", "randstr", "pluginName", "pluginClass", "attr", "camelize", "v", "list", "plugin", "columns", "cols", "key", "col", "item", "convertArray", "$", "val", "initOnly", "pv", "updatePage", "addSelectOption", "field", "found", "prop", "c", "render", "dispatch", "start", "visibleOnly", "len", "tr", "find", "row", "removeAttribute", "headers", "findAll", "th", "fieldName", "value", "k", "i", "data", "metaKey", "dataKey", "cb", "needRender", "flagEmpty", "tbody", "resolve", "response", "err", "event", "filters", "inputs", "input", "name", "baseCol", "haveClasses", "sort", "stack", "itemA", "itemB", "a", "b", "valA", "valB", "columnName", "sortDir", "dir", "reject", "base", "url", "params", "appendParamsToUrl", "newError", "error", "sortedColumn", "thead", "tfoot", "td", "availableWidth", "colMaxWidth", "idx", "ce", "sampleTh", "totalWidth", "colIdx", "computedWidth", "getTextWidth", "w", "colAvailableWidth", "visibleCols", "lastCol", "scrollbarWidth", "diff", "thWithWidth", "hasClass", "actualWidth", "minWidth", "newWidth", "rowsWithSort", "sortableRow", "relatedTh", "filter", "filteredRows", "eventName", "eventHandler", "debounce", "e", "isKeyPressFilter", "isSelect", "uniqueValues", "opt", "on", "ev", "toggleClass", "tv", "interpolate", "prev", "total", "p", "bodyRows", "index", "high", "low", "getAttribute", "data_grid_default", "BasePlugin", "grid", "event", "base_plugin_default", "ColumnResizer", "base_plugin_default", "grid", "resizeLabel", "table", "cols", "findAll", "col", "hasClass", "resizer", "addClass", "startX", "startW", "remainingSpace", "max", "mouseMoveHandler", "e", "newWidth", "setAttribute", "mouseUpHandler", "removeClass", "off", "dispatch", "getAttribute", "on", "target", "visibleCols", "columnIndex", "column", "removeAttribute", "elementOffset", "j", "column_resizer_default", "getParentElement", "el", "type", "prop", "parent", "ContextMenu", "base_plugin_default", "off", "grid", "on", "e", "t", "field", "target", "getParentElement", "menu", "rect", "x", "y", "removeAttribute", "documentClickHandler", "setAttribute", "col", "li", "label", "checkbox", "text", "context_menu_default", "DraggableHeaders", "base_plugin_default", "th", "grid", "on", "e", "t", "target", "getParentElement", "index", "targetIndex", "offset", "tmp", "swapNodes", "selector", "el1", "rowIndex", "el2", "setAttribute", "newNode", "findAll", "c", "getAttribute", "dispatch", "draggable_headers_default", "TouchSupport", "base_plugin_default", "grid", "e", "xDiff", "yDiff", "touch_support_default", "SELECTABLE_CLASS", "SELECT_ALL_CLASS", "CHECKBOX_CLASS", "SelectableRows", "base_plugin_default", "key", "grid", "selectedData", "inputs", "findAll", "checkbox", "idx", "item", "tbody", "input", "tr", "th", "setAttribute", "label", "td", "selectOne", "e", "hasClass", "visibleOnly", "cb", "dispatch", "totalCheckboxes", "totalChecked", "n", "selectable_rows_default", "FixedHeight", "base_plugin_default", "grid", "tbody", "tr", "setAttribute", "fakeRow", "max", "visibleRows", "fakeHeight", "fixed_height_default", "AutosizeColumn", "base_plugin_default", "th", "column", "min", "max", "grid", "hasAttribute", "getAttribute", "firstVal", "lastVal", "v", "v2", "width", "getTextWidth", "setAttribute", "autosize_column_default", "RESPONSIVE_CLASS", "obsTo", "sortByPriority", "list", "a", "b", "v1", "callback", "debounce", "entries", "entry", "grid", "table", "contentBoxSize", "size", "tableWidth", "realTableWidth", "findAll", "result", "th", "diff", "minWidth", "prevAction", "headerCols", "col", "changed", "remaining", "cols", "colWidth", "field", "requiredWidth", "width", "filteredHeaderCols", "footer", "find", "realFooterWidth", "div", "availableFooterWidth", "addClass", "removeClass", "resizeObserver", "ResponsiveGrid", "base_plugin_default", "flag", "tr", "ce", "setAttribute", "td", "idealWidth", "consideredCol", "hCol", "ev", "open", "close", "hasClass", "childRow", "hiddenCols", "insertAfter", "childRowTd", "childTable", "childTableRow", "label", "labelCol", "removeAttribute", "responsive_grid_default", "RowActions", "base_plugin_default", "tr", "actionsTh", "setAttribute", "item", "labels", "td", "actionsToggle", "on", "ev", "action", "button", "interpolate", "actionHandler", "dispatch", "row_actions_default", "EditableColumn", "base_plugin_default", "td", "column", "item", "i", "gridId", "input", "ev", "key", "dispatch", "editable_column_default", "SpinnerSupport", "base_plugin_default", "grid", "classes", "cls", "e", "template", "$", "styleParent", "position", "spinner_support_default", "SaveState", "base_plugin_default", "grid", "cachedState", "col", "hideCol", "c", "dgLoadData", "args", "resolve", "reject", "saveState", "sortableHeaders", "findAll", "el", "filters", "newState", "key", "updateState", "state", "ev", "message", "save_state_default", "data_grid_default", "column_resizer_default", "context_menu_default", "draggable_headers_default", "touch_support_default", "selectable_rows_default", "fixed_height_default", "autosize_column_default", "responsive_grid_default", "row_actions_default", "editable_column_default", "spinner_support_default", "save_state_default", "global"]
}
